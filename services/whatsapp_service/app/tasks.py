# services/whatsapp_service/app/tasks.py

import logging
import asyncio
from common.celery_app import celery_app
from .bot import client, TWILIO_PHONE_NUMBER, state_manager
from .utils.message_utils import safe_send_message, safe_send_media
from common.db.models import (
    get_full_ad_data,
    get_full_ad_description,
    get_db_user_id_by_telegram_id,
    add_favorite_ad,
    remove_favorite_ad,
    list_favorites
)
from common.utils.ad_utils import get_ad_images

logger = logging.getLogger(__name__)


@celery_app.task(name='whatsapp_service.app.tasks.send_ad_with_extra_buttons')
def send_ad_with_extra_buttons(user_id, text, s3_image_url, resource_url, ad_id, ad_external_id):
    """
    Send an ad with instructions for interaction via WhatsApp.

    Args:
        user_id: WhatsApp user ID (phone number)
        text: Ad description text
        s3_image_url: URL to the primary image
        resource_url: Original ad URL
        ad_id: Database ID of the ad
        ad_external_id: External ID of the ad
    """

    async def send():
        try:
            logger.info(f"Sending ad to WhatsApp user {user_id}")

            # WhatsApp doesn't support rich buttons, so we'll add instructions to the text
            text_with_instructions = (
                f"{text}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n"
                f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '—Ñ–æ—Ç–æ {ad_id}' –¥–ª—è –±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ\n"
                f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–µ–ª {ad_id}' –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '–æ–±—Ä {ad_id}' —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω—ñ\n"
                f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '–æ–ø–∏—Å {ad_id}' –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É"
            )

            # Ensure proper WhatsApp formatting - this is the corrected part
            formatted_user_id = user_id
            if not str(formatted_user_id).startswith("whatsapp:"):
                formatted_user_id = f"whatsapp:{formatted_user_id}"

            # Send the ad
            if s3_image_url:
                await safe_send_media(formatted_user_id, s3_image_url, caption=text_with_instructions)
            else:
                await safe_send_message(formatted_user_id, text_with_instructions)

        except Exception as e:
            logger.error(f"Error sending ad to WhatsApp user {user_id}: {e}")

    # Run the async function
    try:
        asyncio.run(send())
    except RuntimeError as e:
        # Handle case where there's already an event loop
        logger.warning(f"RuntimeError in send_ad_with_extra_buttons: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.send_subscription_notification')
def send_subscription_notification(user_id, notification_type, data):
    """
    Send subscription-related notifications to WhatsApp users.

    Args:
        user_id: WhatsApp user ID (phone number)
        notification_type: Type of notification (e.g., "payment_success", "expiration_reminder")
        data: Dictionary with notification data
    """

    async def send():
        try:
            # Prepare message content based on notification type
            if notification_type == "payment_success":
                message_text = (
                    f"‚úÖ –û–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
                    f"üßæ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {data['order_id']}\n"
                    f"üí∞ –°—É–º–∞: {data['amount']} –≥—Ä–Ω.\n"
                    f"üìÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –¥—ñ–π—Å–Ω–∞ –¥–æ: {data['subscription_until']}\n\n"
                    f"–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É! üôè"
                )
            elif notification_type == "expiration_reminder":
                message_text = (
                    f"‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É\n\n"
                    f"–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {data['days_left']} {'–¥–µ–Ω—å' if data['days_left'] == 1 else '–¥–Ω—ñ' if data['days_left'] < 5 else '–¥–Ω—ñ–≤'}.\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {data['subscription_until']}\n\n"
                    f"–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º, –æ–Ω–æ–≤—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É."
                )
            elif notification_type == "expiration_today":
                message_text = (
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ!\n\n"
                    f"–ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {data['subscription_until']}\n\n"
                    f"–©–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—É, –æ–Ω–æ–≤—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–∑."
                )
            else:
                message_text = "–°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

            # Ensure proper WhatsApp formatting
            if not user_id.startswith("whatsapp:"):
                user_id = f"whatsapp:{user_id}"

            # Send notification
            await safe_send_message(user_id, message_text)

        except Exception as e:
            logger.error(f"Error sending notification to WhatsApp user {user_id}: {e}")

    # Run the async function
    try:
        asyncio.run(send())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in send_subscription_notification: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.handle_favorite_actions')
def handle_favorite_actions(user_id, ad_id, action_type):
    """
    Handle favorite-related actions for WhatsApp users.

    Args:
        user_id: WhatsApp user ID (phone number)
        ad_id: ID of the ad
        action_type: Type of action (add, remove, view)
    """

    async def process():
        try:
            # Get user DB ID
            db_user_id = get_db_user_id_by_telegram_id(user_id)
            if not db_user_id:
                await safe_send_message(
                    user_id,
                    "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
                )
                return

            # Handle different actions
            if action_type == "add":
                # Add ad to favorites
                try:
                    add_favorite_ad(db_user_id, ad_id)
                    await safe_send_message(
                        user_id,
                        "‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö!"
                    )
                except ValueError as e:
                    await safe_send_message(user_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

            elif action_type == "remove":
                # Remove ad from favorites
                remove_favorite_ad(db_user_id, ad_id)
                await safe_send_message(
                    user_id,
                    "‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö."
                )

            elif action_type == "view":
                # Get more details about the ad
                ad_data = get_full_ad_data(ad_id)
                if not ad_data:
                    await safe_send_message(
                        user_id,
                        "‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                    )
                    return

                # Get images
                images = ad_data.get("images", [])
                if images and len(images) > 0:
                    # Send first image with information
                    from common.config import build_ad_text
                    text = build_ad_text(ad_data)
                    await safe_send_media(user_id, images[0], caption=text)

                    # Send additional images (up to 3)
                    for img_url in images[1:4]:  # Limit to 3 additional images
                        await safe_send_media(user_id, img_url)
                else:
                    # No images, just send text
                    from common.config import build_ad_text
                    text = build_ad_text(ad_data)
                    await safe_send_message(user_id, text)

        except Exception as e:
            logger.error(f"Error processing favorite action for user {user_id}: {e}")
            await safe_send_message(
                user_id,
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )

    # Run the async function
    try:
        asyncio.run(process())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in handle_favorite_actions: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(process())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.show_more_photos')
def show_more_photos(user_id, ad_id):
    """
    Send additional photos for an ad to a WhatsApp user.

    Args:
        user_id: WhatsApp user ID
        ad_id: ID of the ad
    """

    async def process():
        try:
            # Get ad images from the database
            images = get_ad_images(ad_id)

            if not images or len(images) == 0:
                await safe_send_message(
                    user_id,
                    "‚ùå –î–ª—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π."
                )
                return

            # Send a message about the number of photos
            await safe_send_message(
                user_id,
                f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ({len(images)}):"
            )

            # Send images (limit to 5 to avoid spam)
            for img_url in images[:5]:
                await safe_send_media(user_id, img_url)

            # If there are more images, inform the user
            if len(images) > 5:
                await safe_send_message(
                    user_id,
                    f"... —ñ —â–µ {len(images) - 5} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"
                )

        except Exception as e:
            logger.error(f"Error sending photos for ad {ad_id} to user {user_id}: {e}")
            await safe_send_message(
                user_id,
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π."
            )

    # Run the async function
    try:
        asyncio.run(process())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in show_more_photos: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(process())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.show_phone_numbers')
def show_phone_numbers(user_id, ad_id):
    """
    Send phone numbers for an ad to a WhatsApp user.

    Args:
        user_id: WhatsApp user ID
        ad_id: ID of the ad
    """

    async def process():
        try:
            # Get ad data from database
            ad_data = get_full_ad_data(ad_id)

            if not ad_data:
                await safe_send_message(
                    user_id,
                    "‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
                return

            # Get phone numbers
            phones = ad_data.get("phones", [])
            viber_link = ad_data.get("viber_link")

            if not phones and not viber_link:
                await safe_send_message(
                    user_id,
                    "‚ùå –î–ª—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö."
                )
                return

            # Format phone numbers message
            message = "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:\n\n"

            if phones:
                for i, phone in enumerate(phones, 1):
                    # Clean phone number format
                    clean_phone = phone.replace("tel:", "").strip()
                    message += f"{i}. {clean_phone}\n"

            if viber_link:
                message += f"\nViber: {viber_link}"

            await safe_send_message(user_id, message)

        except Exception as e:
            logger.error(f"Error sending phone numbers for ad {ad_id} to user {user_id}: {e}")
            await safe_send_message(
                user_id,
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö."
            )

    # Run the async function
    try:
        asyncio.run(process())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in show_phone_numbers: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(process())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.show_full_description')
def show_full_description(user_id, ad_id):
    """
    Send full description for an ad to a WhatsApp user.

    Args:
        user_id: WhatsApp user ID
        ad_id: ID of the ad
    """

    async def process():
        try:
            # Get ad data from database
            ad_data = get_full_ad_data(ad_id)

            if not ad_data:
                await safe_send_message(
                    user_id,
                    "‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
                return

            # Get resource URL
            resource_url = ad_data.get("resource_url")

            if not resource_url:
                await safe_send_message(
                    user_id,
                    "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
                )
                return

            # Get full description
            description = get_full_ad_description(resource_url)

            if description:
                await safe_send_message(
                    user_id,
                    f"üìù –ü–æ–≤–Ω–∏–π –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n{description}"
                )
            else:
                await safe_send_message(
                    user_id,
                    "‚ùå –ü–æ–≤–Ω–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
                )

        except Exception as e:
            logger.error(f"Error sending full description for ad {ad_id} to user {user_id}: {e}")
            await safe_send_message(
                user_id,
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–ø–∏—Å—É."
            )

    # Run the async function
    try:
        asyncio.run(process())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in show_full_description: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(process())
        finally:
            loop.close()


@celery_app.task(name='whatsapp_service.app.tasks.show_favorites')
def show_favorites(user_id, page=0):
    """
    Show user's favorite listings with pagination.

    Args:
        user_id: WhatsApp user ID
        page: Page number (starting from 0)
    """

    async def process():
        try:
            # Get user DB ID
            db_user_id = get_db_user_id_by_telegram_id(user_id)

            if not db_user_id:
                await safe_send_message(
                    user_id,
                    "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
                )
                return

            # Get favorites with pagination (5 per page)
            favorites = list_favorites(db_user_id)

            if not favorites:
                await safe_send_message(
                    user_id,
                    "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å."
                )
                return

            # Calculate pagination
            per_page = 5
            total_pages = (len(favorites) - 1) // per_page + 1
            start_idx = page * per_page
            end_idx = min(start_idx + per_page, len(favorites))
            current_favorites = favorites[start_idx:end_idx]

            # Send header with pagination info
            await safe_send_message(
                user_id,
                f"üìë –í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1} –∑ {total_pages}):"
            )

            # Send each favorite as a separate message
            for i, favorite in enumerate(current_favorites, start=start_idx + 1):
                from common.config import build_ad_text

                # Build ad text
                text = build_ad_text(favorite)
                text += f"\n\n#{i} –∑ {len(favorites)}"

                # Add instructions
                text += (
                    f"\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n"
                    f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '–≤–∏–¥–∞–ª–∏—Ç–∏ {favorite['ad_id']}' –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–∏—Ö\n"
                    f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '—Ñ–æ—Ç–æ {favorite['ad_id']}' –¥–ª—è –±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ\n"
                    f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–µ–ª {favorite['ad_id']}' –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                    f"- –í—ñ–¥–ø–æ–≤—ñ–¥—å '–æ–ø–∏—Å {favorite['ad_id']}' –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É"
                )

                # Get image
                image_urls = get_ad_images(favorite['ad_id'])

                if image_urls:
                    await safe_send_media(user_id, image_urls[0], caption=text)
                else:
                    await safe_send_message(user_id, text)

            # Send pagination controls if needed
            if total_pages > 1:
                pagination_text = "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤–≤–µ–¥—ñ—Ç—å:\n"

                if page > 0:
                    pagination_text += f"- '–æ–±—Ä–∞–Ω—ñ {page}' –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏\n"

                if page < total_pages - 1:
                    pagination_text += f"- '–æ–±—Ä–∞–Ω—ñ {page + 2}' –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏\n"

                await safe_send_message(user_id, pagination_text)

        except Exception as e:
            logger.error(f"Error showing favorites for user {user_id}: {e}")
            await safe_send_message(
                user_id,
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å."
            )

    # Run the async function
    try:
        asyncio.run(process())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in show_favorites: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(process())
        finally:
            loop.close()