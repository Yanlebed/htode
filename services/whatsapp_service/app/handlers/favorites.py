# services/whatsapp_service/app/handlers/favorites.py

import logging
from ..bot import send_message, user_states
from common.db.models import list_favorites, get_db_user_id_by_telegram_id, remove_favorite_ad, get_full_ad_description

logger = logging.getLogger(__name__)


def show_favorites(user_id):
    """Show user's favorite listings"""
    # Get user's database ID
    db_user_id = get_db_user_id_by_telegram_id(user_id)

    if not db_user_id:
        send_message(user_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.")
        return

    # Get favorites
    favorites = list_favorites(db_user_id)

    if not favorites:
        send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
        return

    # Store favorites in user state
    user_data = user_states.get(user_id, {})
    user_data["favorites"] = favorites
    user_data["current_favorite_index"] = 0
    user_states[user_id] = user_data

    # Show the first favorite
    show_favorite_at_index(user_id, 0)


def show_favorite_at_index(user_id, index):
    """Display a favorite ad at the specified index"""
    user_data = user_states.get(user_id, {})
    favorites = user_data.get("favorites", [])

    if not favorites or index < 0 or index >= len(favorites):
        send_message(user_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # Get current favorite
    favorite = favorites[index]

    # Format the ad information
    from common.config import GEO_ID_MAPPING
    city_name = GEO_ID_MAPPING.get(favorite.get('city'))

    message = (
        f"*–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {index + 1} –∑ {len(favorites)}*\n\n"
        f"üí∞ –¶—ñ–Ω–∞: {int(favorite.get('price'))} –≥—Ä–Ω.\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city_name}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {favorite.get('address')}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {favorite.get('rooms_count')}\n"
        f"üìê –ü–ª–æ—â–∞: {favorite.get('square_feet')} –∫–≤.–º.\n"
        f"üè¢ –ü–æ–≤–µ—Ä—Ö: {favorite.get('floor')} –∑ {favorite.get('total_floors')}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n"
        "- '–ù–∞—Å—Ç—É–ø–Ω–µ' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "- '–ü–æ–ø–µ—Ä–µ–¥–Ω—î' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "- '–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n"
        "- '–í–∏–¥–∞–ª–∏—Ç–∏' —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö\n"
        "- '–ú–µ–Ω—é' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
    )

    # Get image for the ad
    from common.utils.ad_utils import get_ad_images
    images = get_ad_images(favorite.get('ad_id'))

    if images:
        # Send the first image with the ad description
        send_message(user_id, message, images[0])
    else:
        # Send just the text if no images
        send_message(user_id, message)


def handle_favorite_command(user_id, command):
    """Handle commands for favorites navigation"""
    user_data = user_states.get(user_id, {})
    current_index = user_data.get("current_favorite_index", 0)
    favorites = user_data.get("favorites", [])

    if not favorites:
        send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
        return

    command_lower = command.lower().strip()

    if command_lower in ["next", "–Ω–∞—Å—Ç—É–ø–Ω–µ", "—Å–ª–µ–¥", "–¥–∞–ª—ñ"]:
        # Move to next favorite
        next_index = current_index + 1
        if next_index >= len(favorites):
            next_index = 0  # Wrap around to beginning

        user_data["current_favorite_index"] = next_index
        user_states[user_id] = user_data
        show_favorite_at_index(user_id, next_index)

    elif command_lower in ["previous", "–ø–æ–ø–µ—Ä–µ–¥–Ω—î", "–Ω–∞–∑–∞–¥", "–ø—Ä–µ–¥"]:
        # Move to previous favorite
        prev_index = current_index - 1
        if prev_index < 0:
            prev_index = len(favorites) - 1  # Wrap around to end

        user_data["current_favorite_index"] = prev_index
        user_states[user_id] = user_data
        show_favorite_at_index(user_id, prev_index)

    elif command_lower in ["delete", "–≤–∏–¥–∞–ª–∏—Ç–∏", "remove"]:
        # Remove the current favorite
        db_user_id = get_db_user_id_by_telegram_id(user_id)
        favorite = favorites[current_index]
        ad_id = favorite.get('ad_id')

        if remove_favorite_ad(db_user_id, ad_id):
            send_message(user_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö.")

            # Update the favorites list
            favorites.pop(current_index)
            user_data["favorites"] = favorites

            # Adjust current index if needed
            if not favorites:
                user_data["current_favorite_index"] = 0
                user_states[user_id] = user_data
                send_message(user_id, "–£ –≤–∞—Å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
                return
            elif current_index >= len(favorites):
                user_data["current_favorite_index"] = len(favorites) - 1

            user_states[user_id] = user_data
            show_favorite_at_index(user_id, user_data["current_favorite_index"])
        else:
            send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")

    elif command_lower in ["description", "–ø–æ–≤–Ω–∏–π –æ–ø–∏—Å", "–æ–ø–∏—Å", "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ"]:
        # Show full description
        favorite = favorites[current_index]
        resource_url = favorite.get('resource_url')

        if resource_url:
            full_description = get_full_ad_description(resource_url)
            if full_description:
                send_message(user_id, f"*–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:*\n\n{full_description}")
            else:
                send_message(user_id, "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        else:
            send_message(user_id, "–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")

    elif command_lower in ["menu", "–º–µ–Ω—é", "–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        # Return to main menu
        from .basic_handlers import handle_menu_command
        handle_menu_command(user_id)

    else:
        # Unknown command
        send_message(
            user_id,
            "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n"
            "- '–ù–∞—Å—Ç—É–ø–Ω–µ'\n"
            "- '–ü–æ–ø–µ—Ä–µ–¥–Ω—î'\n"
            "- '–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å'\n"
            "- '–í–∏–¥–∞–ª–∏—Ç–∏'\n"
            "- '–ú–µ–Ω—é'"
        )