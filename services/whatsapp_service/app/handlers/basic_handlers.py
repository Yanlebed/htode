# services/whatsapp_service/app/handlers/basic_handlers.py

import logging
from ..bot import send_message, user_states
from common.db.models import get_or_create_user, update_user_filter
from common.config import GEO_ID_MAPPING, get_key_by_value

logger = logging.getLogger(__name__)

# Define states
STATE_START = "start"
STATE_WAITING_PROPERTY_TYPE = "waiting_property_type"
STATE_WAITING_CITY = "waiting_city"
STATE_WAITING_ROOMS = "waiting_rooms"
STATE_WAITING_PRICE = "waiting_price"
STATE_CONFIRMATION = "confirmation"

# City list
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']


def handle_message(user_id, text, media_urls=None, response=None):
    """
    Handle incoming WhatsApp messages

    Args:
        user_id: User's WhatsApp number (cleaned)
        text: Message text
        media_urls: List of media URLs from the message (if any)
        response: Twilio MessagingResponse object for immediate response
    """
    # If user not in states dict, initialize
    if user_id not in user_states:
        user_states[user_id] = {"state": STATE_START}
        # Get or create user in database
        user_db_id = get_or_create_user(user_id, messenger_type="whatsapp")
        user_states[user_id]["user_db_id"] = user_db_id

    # Get current state
    current_state = user_states[user_id].get("state", STATE_START)

    # Handle commands first
    if text.lower() == "/start":
        handle_start_command(user_id, response)
        return
    elif text.lower() == "/menu":
        handle_menu_command(user_id, response)
        return

    # Handle based on current state
    if current_state == STATE_START:
        handle_start_command(user_id, response)
    elif current_state == STATE_WAITING_PROPERTY_TYPE:
        handle_property_type(user_id, text, response)
    elif current_state == STATE_WAITING_CITY:
        handle_city(user_id, text, response)
    elif current_state == STATE_WAITING_ROOMS:
        handle_rooms(user_id, text, response)
    elif current_state == STATE_WAITING_PRICE:
        handle_price(user_id, text, response)
    elif current_state == STATE_CONFIRMATION:
        handle_confirmation(user_id, text, response)
    else:
        # Handle main menu options
        handle_menu_option(user_id, text, response)


def handle_start_command(user_id, response=None):
    """Handle /start command"""
    welcome_message = (
        "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
        "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n\n"
        "–û–±–µ—Ä–∏ —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É):\n"
        "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
        "2. –ë—É–¥–∏–Ω–æ–∫"
    )

    # Send response
    if response:
        response.message(welcome_message)
    else:
        send_message(user_id, welcome_message)

    # Store user state
    user_states[user_id] = {
        "state": STATE_WAITING_PROPERTY_TYPE
    }

    # Create user in database if not exists
    user_db_id = get_or_create_user(user_id, messenger_type="whatsapp")
    user_states[user_id]["user_db_id"] = user_db_id


def handle_menu_command(user_id, response=None):
    """Handle /menu command"""
    menu_text = (
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n"
        "1. üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "2. ‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ\n"
        "3. ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n"
        "4. üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
        "5. üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó"
    )

    if response:
        response.message(menu_text)
    else:
        send_message(user_id, menu_text)


def handle_property_type(user_id, text, response=None):
    """Handle property type selection"""
    user_data = user_states.get(user_id, {})

    # Map numeric input to property type
    property_mapping = {
        "1": "apartment",
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞": "apartment",
        "2": "house",
        "–±—É–¥–∏–Ω–æ–∫": "house"
    }

    text_lower = text.lower().strip()
    if text_lower in property_mapping:
        property_type = property_mapping[text_lower]
        # Update user state
        user_data["property_type"] = property_type
        user_states[user_id] = user_data

        # Move to city selection
        user_data["state"] = STATE_WAITING_CITY

        city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(AVAILABLE_CITIES[:10])])
        city_message = (
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
            f"{city_options}\n\n"
            "–Ø–∫—â–æ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∞–∑–≤—É"
        )

        if response:
            response.message(city_message)
        else:
            send_message(user_id, city_message)
    else:
        error_message = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É):\n"
            "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "2. –ë—É–¥–∏–Ω–æ–∫"
        )

        if response:
            response.message(error_message)
        else:
            send_message(user_id, error_message)


def handle_city(user_id, text, response=None):
    """Handle city selection"""
    user_data = user_states.get(user_id, {})
    text = text.strip()

    # Check if input is a number
    try:
        city_index = int(text) - 1
        if 0 <= city_index < len(AVAILABLE_CITIES):
            selected_city = AVAILABLE_CITIES[city_index]
        else:
            raise ValueError("City index out of range")
    except ValueError:
        # Try to match text with city name
        text_lower = text.lower()
        matching_cities = [city for city in AVAILABLE_CITIES if city.lower() == text_lower]

        if matching_cities:
            selected_city = matching_cities[0]
        else:
            city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(AVAILABLE_CITIES[:10])])
            error_message = (
                "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
                f"{city_options}"
            )

            if response:
                response.message(error_message)
            else:
                send_message(user_id, error_message)
            return

    # Store city in user data
    user_data["city"] = selected_city
    user_states[user_id] = user_data

    # Move to rooms selection
    user_data["state"] = STATE_WAITING_ROOMS
    rooms_message = (
        "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:\n\n"
        "1. 1 –∫—ñ–º–Ω–∞—Ç–∞\n"
        "2. 2 –∫—ñ–º–Ω–∞—Ç–∏\n"
        "3. 3 –∫—ñ–º–Ω–∞—Ç–∏\n"
        "4. 4 –∫—ñ–º–Ω–∞—Ç–∏\n"
        "5. 5 –∫—ñ–º–Ω–∞—Ç\n"
        "6. –ë—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3"
    )

    if response:
        response.message(rooms_message)
    else:
        send_message(user_id, rooms_message)


def handle_rooms(user_id, text, response=None):
    """Handle rooms selection"""
    user_data = user_states.get(user_id, {})
    text = text.strip()

    if text == "6" or text.lower() in ["–±—É–¥—å-—è–∫–∞", "–±—É–¥—å —è–∫–∞", "–±—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç"]:
        # User selected "Any number of rooms"
        user_data["rooms"] = None
        user_states[user_id] = user_data

        # Move to price selection
        user_data["state"] = STATE_WAITING_PRICE
        show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), response)
    else:
        try:
            # Parse room numbers, support both comma and space separated values
            parts = text.replace(",", " ").split()
            room_numbers = [int(part) for part in parts if part.isdigit() and 1 <= int(part) <= 5]

            if not room_numbers:
                raise ValueError("No valid room numbers found")

            # Store selected rooms
            user_data["rooms"] = room_numbers
            user_states[user_id] = user_data

            # Show confirmation and move to price selection
            rooms_text = ", ".join(map(str, room_numbers))
            confirm_message = f"–û–±—Ä–∞–Ω–æ –∫—ñ–º–Ω–∞—Ç: {rooms_text}"

            if response:
                response.message(confirm_message)
            else:
                send_message(user_id, confirm_message)

            # Move to price selection
            user_data["state"] = STATE_WAITING_PRICE
            show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), None)  # Don't use the same response twice
        except ValueError:
            error_message = (
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–∏ –≤—ñ–¥ 1 –¥–æ 5, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏ –∞–±–æ –ø—Ä–æ–±—ñ–ª–∞–º–∏.\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3 –∞–±–æ 2 3 4\n"
                "–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å 6 –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç."
            )

            if response:
                response.message(error_message)
            else:
                send_message(user_id, error_message)


def get_price_ranges(city):
    """
    Returns price ranges for the given city.
    """
    # Group cities by size for price ranges
    big_cities = {'–ö–∏—ó–≤'}
    medium_cities = {'–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'}

    if city in big_cities:
        # up to 15000, 15000‚Äì20000, 20000‚Äì30000, more than 30000
        return [(0, 15000), (15000, 20000), (20000, 30000), (30000, None)]
    elif city in medium_cities:
        # up to 7000, 7000‚Äì10000, 10000‚Äì15000, more than 15000
        return [(0, 7000), (7000, 10000), (10000, 15000), (15000, None)]
    else:
        # Default to "smaller" city intervals
        # up to 5000, 5000‚Äì7000, 7000‚Äì10000, more than 10000
        return [(0, 5000), (5000, 7000), (7000, 10000), (10000, None)]


def show_price_options(user_id, city, response=None):
    """Show price range options based on city"""
    price_ranges = get_price_ranges(city)

    options = []
    for i, (low, high) in enumerate(price_ranges):
        if high is None:
            options.append(f"{i + 1}. –ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω.")
        else:
            if low == 0:
                options.append(f"{i + 1}. –î–æ {high} –≥—Ä–Ω.")
            else:
                options.append(f"{i + 1}. {low}-{high} –≥—Ä–Ω.")

    price_message = (
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):\n\n"
            + "\n".join(options)
    )

    if response:
        response.message(price_message)
    else:
        send_message(user_id, price_message)


def handle_price(user_id, text, response=None):
    """Handle price range selection"""
    user_data = user_states.get(user_id, {})
    text = text.strip()

    city = user_data.get("city", "–ö–∏—ó–≤")
    price_ranges = get_price_ranges(city)

    try:
        selection = int(text)
        if 1 <= selection <= len(price_ranges):
            low, high = price_ranges[selection - 1]

            # Store price range
            user_data["price_min"] = low if low > 0 else None
            user_data["price_max"] = high
            user_states[user_id] = user_data

            # Format price range for display
            if high is None:
                price_text = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
            else:
                if low == 0:
                    price_text = f"–î–æ {high} –≥—Ä–Ω."
                else:
                    price_text = f"{low}-{high} –≥—Ä–Ω."

            confirm_message = f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω: {price_text}"

            if response:
                response.message(confirm_message)
            else:
                send_message(user_id, confirm_message)

            # Show confirmation
            show_confirmation(user_id, None)  # Don't use the same response twice
        else:
            raise ValueError("Selection out of range")
    except (ValueError, IndexError):
        error_message = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω, –≤–≤—ñ–≤—à–∏ —Ü–∏—Ñ—Ä—É –≤—ñ–¥ 1 –¥–æ "
            f"{len(price_ranges)}."
        )

        if response:
            response.message(error_message)
        else:
            send_message(user_id, error_message)


def show_confirmation(user_id, response=None):
    """Show subscription confirmation"""
    user_data = user_states.get(user_id, {})
    user_data["state"] = STATE_CONFIRMATION
    user_states[user_id] = user_data

    # Build summary text
    property_type = user_data.get("property_type", "")
    city = user_data.get("city", "")
    rooms = ", ".join(map(str, user_data.get("rooms", []))) if user_data.get("rooms") else "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    price_min = user_data.get("price_min")
    price_max = user_data.get("price_max")
    if price_min and price_max:
        price_range = f"{price_min}-{price_max}"
    elif price_min and not price_max:
        price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
    elif not price_min and price_max:
        price_range = f"–î–æ {price_max}"
    else:
        price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    # Property type human-readable
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(property_type, "")

    summary = (
        "*–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:*\n\n"
        f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n\n"
        "–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –≤–≤–µ–¥—ñ—Ç—å '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'.\n"
        "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –≤–≤–µ–¥—ñ—Ç—å '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'.\n"
        "–î–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å '–†–æ–∑—à–∏—Ä–µ–Ω–∏–π'."
    )

    if response:
        response.message(summary)
    else:
        send_message(user_id, summary)


def handle_confirmation(user_id, text, response=None):
    """Handle confirmation of search parameters"""
    user_data = user_states.get(user_id, {})
    text_lower = text.lower().strip()

    if text_lower in ["–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", "subscribe", "1"]:
        # Get user database ID
        user_db_id = user_data.get("user_db_id")
        if not user_db_id:
            error_message = "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
            if response:
                response.message(error_message)
            else:
                send_message(user_id, error_message)
            return

        # Prepare filters for database
        filters = {
            'property_type': user_data.get('property_type'),
            'city': user_data.get('city'),
            'rooms': user_data.get('rooms'),
            'price_min': user_data.get('price_min'),
            'price_max': user_data.get('price_max'),
        }

        # Save filters to database
        try:
            update_user_filter(user_db_id, filters)
            from common.db.models import start_free_subscription_of_user
            start_free_subscription_of_user(user_db_id)

            # Send confirmation message
            success_message = "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å!"
            if response:
                response.message(success_message)
            else:
                send_message(user_id, success_message)

            # Send additional message about notifications
            notification_message = "–ú–∏ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–π–Ω–æ –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è!"
            send_message(user_id, notification_message)

            # Trigger ad notification task via Celery
            from common.celery_app import celery_app
            celery_app.send_task(
                'notifier_service.app.tasks.notify_user_with_ads',
                args=[user_db_id, filters]
            )

            # Reset state to main menu
            user_data["state"] = STATE_START
            user_states[user_id] = user_data

            # Show main menu
            handle_menu_command(user_id, None)

        except Exception as e:
            logger.error(f"Error updating user filters: {e}")
            error_message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            if response:
                response.message(error_message)
            else:
                send_message(user_id, error_message)

    elif text_lower in ["—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", "edit", "2"]:
        edit_message = (
            "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É):\n\n"
            "1. –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
            "2. –ú—ñ—Å—Ç–æ\n"
            "3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n"
            "4. –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω\n"
            "5. –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
        )

        if response:
            response.message(edit_message)
        else:
            send_message(user_id, edit_message)

    elif text_lower in ["—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π", "advanced", "3"]:
        advanced_message = "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ WhatsApp."

        if response:
            response.message(advanced_message)
        else:
            send_message(user_id, advanced_message)

    else:
        error_message = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å:\n"
            "'–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è' - —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
            "'–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' - —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
            "'–†–æ–∑—à–∏—Ä–µ–Ω–∏–π' - –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"
        )

        if response:
            response.message(error_message)
        else:
            send_message(user_id, error_message)


def handle_menu_option(user_id, text, response=None):
    """Handle main menu option selection"""
    text_lower = text.lower().strip()

    # Handle both text and numeric input
    if text_lower in ["1", "–º–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏", "üìù –º–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"]:
        # Subscription management
        message = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—ñ–¥–ø–∏—Å–æ–∫ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        if response:
            response.message(message)
        else:
            send_message(user_id, message)

    elif text_lower in ["2", "–æ–±—Ä–∞–Ω—ñ", "‚ù§Ô∏è –æ–±—Ä–∞–Ω—ñ"]:
        # Favorites
        message = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ–±—Ä–∞–Ω–∏—Ö —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        if response:
            response.message(message)
        else:
            send_message(user_id, message)

    elif text_lower in ["3", "—è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î", "ü§î —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î"]:
        # Help information
        help_message = (
            "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
            "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞.\n"
            "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.\n"
            "3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
            "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
        )
        if response:
            response.message(help_message)
        else:
            send_message(user_id, help_message)

    elif text_lower in ["4", "–æ–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "üí≥ –æ–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"]:
        # Payment
        message = "–§—É–Ω–∫—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        if response:
            response.message(message)
        else:
            send_message(user_id, message)


    elif text_lower in ["5", "—Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "üßë‚Äçüíª —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"]:
        # Support
        support_message = (
            "–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
            "–ü–æ—á–Ω—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:' —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ."
        )
        if response:
            response.message(support_message)
        else:
            send_message(user_id, support_message)

    else:
        # Check if this is a support request
        if text_lower.startswith("–ø—ñ–¥—Ç—Ä–∏–º–∫–∞:") or text_lower.startswith("support:"):
            support_request = text[text.find(":") + 1:].strip()
            if support_request:
                # Log the support request
                logger.info(f"Support request from {user_id}: {support_request}")

                # Forward to support system or notify admins (implementation depends on your setup)
                thank_you_message = "–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                if response:
                    response.message(thank_you_message)
                else:
                    send_message(user_id, thank_you_message)
                return

        # Unknown command
        menu_message = (
            "–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:\n\n"
            "1. üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
            "2. ‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ\n"
            "3. ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n"
            "4. üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
            "5. üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó –∞–±–æ /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É."
        )
        if response:
            response.message(menu_message)
        else:
            send_message(user_id, menu_message)