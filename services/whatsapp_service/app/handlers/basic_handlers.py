# services/whatsapp_service/app/handlers/basic_handlers.py

import asyncio
from ..bot import state_manager
from ..utils.message_utils import safe_send_message
from common.db.operations import (
    get_or_create_user,
    update_user_filter,
    start_free_subscription_of_user
)
from common.celery_app import celery_app
from common.utils.logging_config import log_context, log_operation, LogAggregator

# Import the service logger
from .. import logger

# UPDATED: Add import for flow handling
from ..flow_integration import check_and_process_flow, process_numeric_flow_action, process_flow_action

# Define states
STATE_START = "start"
STATE_WAITING_PROPERTY_TYPE = "waiting_property_type"
STATE_WAITING_CITY = "waiting_city"
STATE_WAITING_ROOMS = "waiting_rooms"
STATE_WAITING_PRICE = "waiting_price"
STATE_CONFIRMATION = "confirmation"
STATE_EDITING_PARAMETERS = "editing_parameters"

# City list
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']


@log_operation("handle_message")
async def handle_message(user_id, text, media_urls=None, response=None):
    """
    Handle incoming WhatsApp messages asynchronously

    Args:
        user_id: User's WhatsApp number (cleaned)
        text: Message text
        media_urls: List of media URLs from the message (if any)
        response: Twilio MessagingResponse object for immediate response
    """
    with log_context(logger, user_id=user_id, message_length=len(text), has_media=bool(media_urls)):
        logger.info(f"Processing message from {user_id}", extra={
            'text_preview': text[:50],
            'media_count': len(media_urls) if media_urls else 0
        })

        # ADDED: First check if a flow should handle this message
        if await check_and_process_flow(user_id, text, response):
            logger.info(f"Message handled by flow for user {user_id}")
            return

        # ADDED: Check for flow actions (for handling menu selection by number)
        user_data = await state_manager.get_state(user_id) or {"state": STATE_START}
        if text.isdigit() and await process_numeric_flow_action(user_id, text, user_data):
            logger.info(f"Numeric flow action processed for user {user_id}")
            return

        # ADDED: Check for explicit flow commands
        if text.startswith("flow:") and await process_flow_action(user_id, text):
            logger.info(f"Flow command processed for user {user_id}")
            return

        # Continue with regular message handling
        current_state = user_data.get("state", STATE_START)
        logger.debug(f"Current state for user {user_id}: {current_state}")

        # Handle phone verification states
        from .phone_verification import (
            STATE_WAITING_FOR_PHONE,
            STATE_WAITING_FOR_CODE,
            STATE_WAITING_FOR_CONFIRMATION,
            handle_phone_input,
            handle_verification_code,
            handle_merge_confirmation
        )

        # Check for verification flow states first
        if current_state == STATE_WAITING_FOR_PHONE:
            logger.info(f"Handling phone input for user {user_id}")
            await handle_phone_input(user_id, text, response)
            return
        elif current_state == STATE_WAITING_FOR_CODE:
            logger.info(f"Handling verification code for user {user_id}")
            await handle_verification_code(user_id, text, response)
            return
        elif current_state == STATE_WAITING_FOR_CONFIRMATION:
            logger.info(f"Handling merge confirmation for user {user_id}")
            await handle_merge_confirmation(user_id, text, response)
            return

        # If no state or new user, create user_db_id
        if "user_db_id" not in user_data:
            with log_context(logger, operation="create_user"):
                user_db_id = get_or_create_user(user_id, messenger_type="whatsapp")
                await state_manager.update_state(user_id, {
                    "user_db_id": user_db_id
                })
                logger.info(f"Created database user ID {user_db_id} for WhatsApp user {user_id}")

        # Handle commands first
        if text.lower() == "/start":
            await handle_start_command(user_id, response)
            return
        elif text.lower() == "/menu":
            await handle_menu_command(user_id, response)
            return

        # Handle based on current state
        if current_state == STATE_START:
            await handle_start_command(user_id, response)
        elif current_state == STATE_WAITING_PROPERTY_TYPE:
            await handle_property_type(user_id, text, response)
        elif current_state == STATE_WAITING_CITY:
            await handle_city(user_id, text, response)
        elif current_state == STATE_WAITING_ROOMS:
            await handle_rooms(user_id, text, response)
        elif current_state == STATE_WAITING_PRICE:
            await handle_price(user_id, text, response)
        elif current_state == STATE_CONFIRMATION:
            await handle_confirmation(user_id, text, response)
        elif current_state == STATE_EDITING_PARAMETERS:
            await handle_edit_parameters(user_id, text, response)
        else:
            # Handle main menu options
            await handle_menu_option(user_id, text, response)


@log_operation("handle_start_command")
async def handle_start_command(user_id, response=None):
    """Handle /start command asynchronously"""
    with log_context(logger, user_id=user_id):
        logger.info(f"Processing /start command for user {user_id}")

        welcome_message = (
            "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
            "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
            "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n\n"
            "–û–±–µ—Ä–∏ —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É):\n"
            "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "2. –ë—É–¥–∏–Ω–æ–∫"
        )

        # Send response
        if response:
            response.message(welcome_message)
        else:
            await safe_send_message(user_id, welcome_message)

        # Store user state in Redis
        await state_manager.set_state(user_id, {
            "state": STATE_WAITING_PROPERTY_TYPE
        })

        # Create user in database if not exists
        user_db_id = get_or_create_user(user_id, messenger_type="whatsapp")
        await state_manager.update_state(user_id, {
            "user_db_id": user_db_id
        })

        logger.info(f"Start command completed for user {user_id}")


@log_operation("handle_menu_command")
async def handle_menu_command(user_id, response=None):
    """Handle /menu command asynchronously"""
    with log_context(logger, user_id=user_id):
        logger.info(f"Processing /menu command for user {user_id}")

        menu_text = (
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n"
            "1. üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
            "2. ‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ\n"
            "3. ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n"
            "4. üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
            "5. üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
            "6. üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó"
        )

        # Reset state to start
        await state_manager.update_state(user_id, {
            "state": STATE_START
        })

        if response:
            response.message(menu_text)
        else:
            await safe_send_message(user_id, menu_text)

        logger.info(f"Menu command completed for user {user_id}")


@log_operation("handle_property_type")
async def handle_property_type(user_id, text, response=None):
    """Handle property type selection asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing property type selection for user {user_id}")

        # Map numeric input to property type
        property_mapping = {
            "1": "apartment",
            "–∫–≤–∞—Ä—Ç–∏—Ä–∞": "apartment",
            "2": "house",
            "–±—É–¥–∏–Ω–æ–∫": "house"
        }

        text_lower = text.lower().strip()
        if text_lower in property_mapping:
            property_type = property_mapping[text_lower]
            logger.info(f"User {user_id} selected property type: {property_type}")

            # Update user state
            await state_manager.update_state(user_id, {
                "property_type": property_type,
                "state": STATE_WAITING_CITY
            })

            # Move to city selection
            city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(AVAILABLE_CITIES[:10])])
            city_message = (
                "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
                f"{city_options}\n\n"
                "–Ø–∫—â–æ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∞–∑–≤—É"
            )

            if response:
                response.message(city_message)
            else:
                await safe_send_message(user_id, city_message)
        else:
            logger.warning(f"Invalid property type input from user {user_id}: {text}")
            error_message = (
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É):\n"
                "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
                "2. –ë—É–¥–∏–Ω–æ–∫"
            )

            if response:
                response.message(error_message)
            else:
                await safe_send_message(user_id, error_message)


@log_operation("handle_city")
async def handle_city(user_id, text, response=None):
    """Handle city selection asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing city selection for user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        text = text.strip()

        # Check if input is a number
        try:
            city_index = int(text) - 1
            if 0 <= city_index < len(AVAILABLE_CITIES):
                selected_city = AVAILABLE_CITIES[city_index]
                logger.info(f"User {user_id} selected city by index: {selected_city}")
            else:
                raise ValueError("City index out of range")
        except ValueError:
            # Try to match text with city name
            text_lower = text.lower()
            matching_cities = [city for city in AVAILABLE_CITIES if city.lower() == text_lower]

            if matching_cities:
                selected_city = matching_cities[0]
                logger.info(f"User {user_id} selected city by name: {selected_city}")
            else:
                logger.warning(f"Invalid city input from user {user_id}: {text}")
                city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(AVAILABLE_CITIES[:10])])
                error_message = (
                    "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
                    f"{city_options}"
                )

                if response:
                    response.message(error_message)
                else:
                    await safe_send_message(user_id, error_message)
                return

        # Store city in user data
        await state_manager.update_state(user_id, {
            "city": selected_city,
            "state": STATE_WAITING_ROOMS
        })

        # Move to rooms selection
        rooms_message = (
            "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:\n\n"
            "1. 1 –∫—ñ–º–Ω–∞—Ç–∞\n"
            "2. 2 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "3. 3 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "4. 4 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "5. 5 –∫—ñ–º–Ω–∞—Ç\n"
            "6. –ë—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3"
        )

        if response:
            response.message(rooms_message)
        else:
            await safe_send_message(user_id, rooms_message)


@log_operation("handle_rooms")
async def handle_rooms(user_id, text, response=None):
    """Handle rooms selection asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing rooms selection for user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        text = text.strip()

        if text == "6" or text.lower() in ["–±—É–¥—å-—è–∫–∞", "–±—É–¥—å —è–∫–∞", "–±—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç"]:
            logger.info(f"User {user_id} selected 'Any number of rooms'")
            # User selected "Any number of rooms"
            await state_manager.update_state(user_id, {
                "rooms": None,
                "state": STATE_WAITING_PRICE
            })

            # Move to price selection
            await show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), response)
        else:
            try:
                # Parse room numbers, support both comma and space separated values
                parts = text.replace(",", " ").split()
                room_numbers = [int(part) for part in parts if part.isdigit() and 1 <= int(part) <= 5]

                if not room_numbers:
                    raise ValueError("No valid room numbers found")

                logger.info(f"User {user_id} selected rooms: {room_numbers}")

                # Store selected rooms
                await state_manager.update_state(user_id, {
                    "rooms": room_numbers,
                    "state": STATE_WAITING_PRICE
                })

                # Show confirmation and move to price selection
                rooms_text = ", ".join(map(str, room_numbers))
                confirm_message = f"–û–±—Ä–∞–Ω–æ –∫—ñ–º–Ω–∞—Ç: {rooms_text}"

                if response:
                    response.message(confirm_message)
                    # Don't use the same response twice
                    await asyncio.sleep(0.5)  # Small delay before the next message
                    await show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), None)
                else:
                    await safe_send_message(user_id, confirm_message)
                    await show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), None)
            except ValueError:
                logger.warning(f"Invalid rooms input from user {user_id}: {text}")
                error_message = (
                    "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–∏ –≤—ñ–¥ 1 –¥–æ 5, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏ –∞–±–æ –ø—Ä–æ–±—ñ–ª–∞–º–∏.\n"
                    "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3 –∞–±–æ 2 3 4\n"
                    "–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å 6 –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç."
                )

                if response:
                    response.message(error_message)
                else:
                    await safe_send_message(user_id, error_message)


@log_operation("get_price_ranges")
async def get_price_ranges(city):
    """
    Returns price ranges for the given city asynchronously.
    """
    with log_context(logger, city=city):
        # Group cities by size for price ranges
        big_cities = {'–ö–∏—ó–≤'}
        medium_cities = {'–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'}

        if city in big_cities:
            ranges = [(0, 15000), (15000, 20000), (20000, 30000), (30000, None)]
        elif city in medium_cities:
            ranges = [(0, 7000), (7000, 10000), (10000, 15000), (15000, None)]
        else:
            ranges = [(0, 5000), (5000, 7000), (7000, 10000), (10000, None)]

        logger.debug(f"Price ranges for {city}: {ranges}")
        return ranges


@log_operation("show_price_options")
async def show_price_options(user_id, city, response=None):
    """Show price range options based on city asynchronously"""
    with log_context(logger, user_id=user_id, city=city):
        logger.info(f"Showing price options for city {city} to user {user_id}")

        price_ranges = await get_price_ranges(city)

        options = []
        for i, (low, high) in enumerate(price_ranges):
            if high is None:
                options.append(f"{i + 1}. –ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω.")
            else:
                if low == 0:
                    options.append(f"{i + 1}. –î–æ {high} –≥—Ä–Ω.")
                else:
                    options.append(f"{i + 1}. {low}-{high} –≥—Ä–Ω.")

        price_message = (
                "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):\n\n"
                + "\n".join(options)
        )

        if response:
            response.message(price_message)
        else:
            await safe_send_message(user_id, price_message)


@log_operation("handle_price")
async def handle_price(user_id, text, response=None):
    """Handle price range selection asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing price selection for user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        text = text.strip()

        city = user_data.get("city", "–ö–∏—ó–≤")
        price_ranges = await get_price_ranges(city)

        try:
            selection = int(text)
            if 1 <= selection <= len(price_ranges):
                low, high = price_ranges[selection - 1]
                logger.info(f"User {user_id} selected price range: {low}-{high}")

                # Store price range
                await state_manager.update_state(user_id, {
                    "price_min": low if low > 0 else None,
                    "price_max": high,
                    "state": STATE_CONFIRMATION
                })

                # Format price range for display
                if high is None:
                    price_text = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
                else:
                    if low == 0:
                        price_text = f"–î–æ {high} –≥—Ä–Ω."
                    else:
                        price_text = f"{low}-{high} –≥—Ä–Ω."

                confirm_message = f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω: {price_text}"

                if response:
                    response.message(confirm_message)
                    # Don't use the same response twice
                    await asyncio.sleep(0.5)  # Small delay before showing confirmation
                    await show_confirmation(user_id, None)
                else:
                    await safe_send_message(user_id, confirm_message)
                    await show_confirmation(user_id, None)
            else:
                raise ValueError("Selection out of range")
        except (ValueError, IndexError):
            logger.warning(f"Invalid price selection from user {user_id}: {text}")
            error_message = (
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω, –≤–≤—ñ–≤—à–∏ —Ü–∏—Ñ—Ä—É –≤—ñ–¥ 1 –¥–æ "
                f"{len(price_ranges)}."
            )

            if response:
                response.message(error_message)
            else:
                await safe_send_message(user_id, error_message)


@log_operation("show_confirmation")
async def show_confirmation(user_id, response=None):
    """Show subscription confirmation asynchronously"""
    with log_context(logger, user_id=user_id):
        logger.info(f"Showing confirmation to user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        await state_manager.update_state(user_id, {
            "state": STATE_CONFIRMATION
        })

        # Build summary text
        property_type = user_data.get("property_type", "")
        city = user_data.get("city", "")
        rooms = ", ".join(map(str, user_data.get("rooms", []))) if user_data.get("rooms") else "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

        price_min = user_data.get("price_min")
        price_max = user_data.get("price_max")
        if price_min and price_max:
            price_range = f"{price_min}-{price_max}"
        elif price_min and not price_max:
            price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
        elif not price_min and price_max:
            price_range = f"–î–æ {price_max}"
        else:
            price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

        # Property type human-readable
        mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
        ua_lang_property_type = mapping_property.get(property_type, "")

        summary = (
            "*–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:*\n\n"
            f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
            f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
            f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
            f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n\n"
            "–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –≤–≤–µ–¥—ñ—Ç—å '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'.\n"
            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –≤–≤–µ–¥—ñ—Ç—å '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'.\n"
            "–î–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å '–†–æ–∑—à–∏—Ä–µ–Ω–∏–π'."
        )

        if response:
            response.message(summary)
        else:
            await safe_send_message(user_id, summary)


@log_operation("handle_confirmation")
async def handle_confirmation(user_id, text, response=None):
    """Handle confirmation of search parameters asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing confirmation for user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        text_lower = text.lower().strip()

        if text_lower in ["–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", "subscribe", "1"]:
            # Get user database ID
            user_db_id = user_data.get("user_db_id")
            if not user_db_id:
                logger.error(f"No user_db_id found for user {user_id}")
                error_message = "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
                if response:
                    response.message(error_message)
                else:
                    await safe_send_message(user_id, error_message)
                return

            # Prepare filters for database
            filters = {
                'property_type': user_data.get('property_type'),
                'city': user_data.get('city'),
                'rooms': user_data.get('rooms'),
                'price_min': user_data.get('price_min'),
                'price_max': user_data.get('price_max'),
            }

            logger.info(f"Saving filters for user {user_id}: {filters}")

            # Save filters to database
            try:
                update_user_filter(user_db_id, filters)
                start_free_subscription_of_user(user_db_id)

                # Send confirmation message
                success_message = "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å!"
                if response:
                    response.message(success_message)
                else:
                    await safe_send_message(user_id, success_message)

                # Send additional message about notifications
                notification_message = "–ú–∏ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–π–Ω–æ –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è!"
                await safe_send_message(user_id, notification_message)

                # Trigger ad notification task via Celery
                celery_app.send_task(
                    'notifier_service.app.tasks.notify_user_with_ads',
                    args=[user_db_id, filters]
                )

                # Reset state to main menu
                await state_manager.update_state(user_id, {
                    "state": STATE_START
                })

                # Show main menu
                await handle_menu_command(user_id, None)

                logger.info(f"Successfully created subscription for user {user_id}")

            except Exception as e:
                logger.error(f"Error updating user filters", exc_info=True, extra={
                    'user_id': user_id,
                    'user_db_id': user_db_id,
                    'error_type': type(e).__name__
                })
                error_message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                if response:
                    response.message(error_message)
                else:
                    await safe_send_message(user_id, error_message)

        elif text_lower in ["—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", "edit", "2"]:
            logger.info(f"User {user_id} chose to edit parameters")
            # Update state to editing parameters
            await state_manager.update_state(user_id, {
                "state": STATE_EDITING_PARAMETERS
            })

            edit_message = (
                "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É):\n\n"
                "1. –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
                "2. –ú—ñ—Å—Ç–æ\n"
                "3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n"
                "4. –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω\n"
                "5. –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
            )

            if response:
                response.message(edit_message)
            else:
                await safe_send_message(user_id, edit_message)

        elif text_lower in ["—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π", "advanced", "3"]:
            logger.info(f"User {user_id} requested advanced search (not available)")
            advanced_message = "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ WhatsApp."

            if response:
                response.message(advanced_message)
            else:
                await safe_send_message(user_id, advanced_message)

        else:
            logger.warning(f"Invalid confirmation input from user {user_id}: {text}")
            error_message = (
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å:\n"
                "'–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è' - —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
                "'–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' - —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
                "'–†–æ–∑—à–∏—Ä–µ–Ω–∏–π' - –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"
            )

            if response:
                response.message(error_message)
            else:
                await safe_send_message(user_id, error_message)


@log_operation("handle_edit_parameters")
async def handle_edit_parameters(user_id, text, response=None):
    """Handle editing parameters asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing edit parameters for user {user_id}")

        # Get user data from state
        user_data = await state_manager.get_state(user_id) or {}
        text = text.strip()

        try:
            option = int(text)
            logger.debug(f"User {user_id} selected edit option {option}")

            if option == 1:  # Edit property type
                await state_manager.update_state(user_id, {
                    "state": STATE_WAITING_PROPERTY_TYPE
                })

                message = (
                    "–û–±–µ—Ä–∏ —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É):\n"
                    "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
                    "2. –ë—É–¥–∏–Ω–æ–∫"
                )

                if response:
                    response.message(message)
                else:
                    await safe_send_message(user_id, message)

            elif option == 2:  # Edit city
                await state_manager.update_state(user_id, {
                    "state": STATE_WAITING_CITY
                })

                city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(AVAILABLE_CITIES[:10])])
                message = (
                    "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
                    f"{city_options}\n\n"
                    "–Ø–∫—â–æ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∞–∑–≤—É"
                )

                if response:
                    response.message(message)
                else:
                    await safe_send_message(user_id, message)

            elif option == 3:  # Edit rooms
                await state_manager.update_state(user_id, {
                    "state": STATE_WAITING_ROOMS
                })

                message = (
                    "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:\n\n"
                    "1. 1 –∫—ñ–º–Ω–∞—Ç–∞\n"
                    "2. 2 –∫—ñ–º–Ω–∞—Ç–∏\n"
                    "3. 3 –∫—ñ–º–Ω–∞—Ç–∏\n"
                    "4. 4 –∫—ñ–º–Ω–∞—Ç–∏\n"
                    "5. 5 –∫—ñ–º–Ω–∞—Ç\n"
                    "6. –ë—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n\n"
                    "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3"
                )

                if response:
                    response.message(message)
                else:
                    await safe_send_message(user_id, message)

            elif option == 4:  # Edit price
                await state_manager.update_state(user_id, {
                    "state": STATE_WAITING_PRICE
                })

                await show_price_options(user_id, user_data.get("city", "–ö–∏—ó–≤"), response)

            elif option == 5:  # Cancel editing
                await state_manager.update_state(user_id, {
                    "state": STATE_CONFIRMATION
                })

                await show_confirmation(user_id, response)

            else:
                raise ValueError("Invalid option")

        except (ValueError, TypeError):
            logger.warning(f"Invalid edit option from user {user_id}: {text}")
            message = (
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É –≤—ñ–¥ 1 –¥–æ 5:\n\n"
                "1. –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
                "2. –ú—ñ—Å—Ç–æ\n"
                "3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n"
                "4. –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω\n"
                "5. –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
            )

            if response:
                response.message(message)
            else:
                await safe_send_message(user_id, message)


@log_operation("handle_menu_option")
async def handle_menu_option(user_id, text, response=None):
    # TODO: finish async def handle_menu_option
    """Handle main menu option selection asynchronously"""
    with log_context(logger, user_id=user_id, user_input=text):
        logger.info(f"Processing menu option for user {user_id}")
        text_lower = text.lower().strip()

        # Handle both text and numeric input
        if text_lower in ["1", "–º–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏", "üìù –º–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"]:
            logger.info(f"User {user_id} selected subscriptions")
            # Subscription management
            message = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—ñ–¥–ø–∏—Å–æ–∫ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
            if response:
                response.message(message)
            else:
                await safe_send_message(user_id, message)

        elif text_lower in ["2", "–æ–±—Ä–∞–Ω—ñ", "‚ù§Ô∏è –æ–±—Ä–∞–Ω—ñ"]:
            logger.info(f"User {user_id} selected favorites")
            # Favorites
            message = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ–±—Ä–∞–Ω–∏—Ö —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
            if response:
                response.message(message)
            else:
                await safe_send_message(user_id, message)

        elif text_lower in ["3", "—è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î", "ü§î —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î"]:
            logger.info(f"User {user_id} selected how it works")
            # Help information
            help_message = (
                "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
                "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞.\n"
                "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.\n"
                "3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
                "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
            )
            if response:
                response.message(help_message)
            else:
                await safe_send_message(user_id, help_message)

        elif text_lower in ["4", "–æ–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "üí≥ –æ–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"]:
            logger.info(f"User {user_id} selected payment")
            # Payment
            message = "–§—É–Ω–∫—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
            if response:
                response.message(message)
            else:
                await safe_send_message(user_id, message)

        elif text_lower in ["5", "üßë‚Äçüíª —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "—Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "üßë‚Äçüíª —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"]:
            logger.info(f"User {user_id} selected support")
            # Support
            support_message = (
                "–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
                "–ü–æ—á–Ω—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:' —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ."
            )
            if response:
                response.message(support_message)
            else:
                await safe_send_message(user_id, support_message)

        elif text_lower in ["üì± –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è"]:
            logger.info(f"User {user_id} selected phone verification")
            # Phone verification
            from .phone_verification import start_phone_verification
            await start_phone_verification(user_id, response)

        else:
            # Check if this is a support request
            if text_lower.startswith("–ø—ñ–¥—Ç—Ä–∏–º–∫–∞:") or text_lower.startswith("support:"):
                support_request = text[text.find(":") + 1:].strip()
                if support_request:
                    logger.info(f"Support request from {user_id}: {support_request}")

                    # Forward to support system or notify admins (implementation depends on your setup)
                    thank_you_message = "–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                    if response:
                        response.message(thank_you_message)
                    else:
                        await safe_send_message(user_id, thank_you_message)
                    return

            logger.warning(f"Unknown menu option from user {user_id}: {text}")

            # Parse ad-related commands (format: "—Ñ–æ—Ç–æ 123", "—Ç–µ–ª 123", etc.)
            command_parts = text.lower().split()
            if len(command_parts) == 2:
                command, ad_id_str = command_parts
                # ... (rest of the original logic)