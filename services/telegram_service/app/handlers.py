# services/telegram_service/app/handlers.py
import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .bot import dp, bot
from .states import FilterStates
from .keyboards import (
    property_type_keyboard, city_keyboard, rooms_keyboard,
    price_keyboard, confirmation_keyboard,
    edit_parameters_keyboard, floor_keyboard
)
from common.db.models import get_or_create_user, update_user_filter, get_user_filters, disable_subscription_for_user, \
    enable_subscription_for_user, get_subscription_data_for_user, get_subscription_until_for_user
from common.db.database import execute_query
from common.celery_app import celery_app  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π Celery –µ–∫–∑–µ–º–ø–ª—è—Ä
from .keyboards import (
    main_menu_keyboard,
    subscription_menu_keyboard,
    how_to_use_keyboard,
    tech_support_keyboard
)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç (–º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_db_id = get_or_create_user(telegram_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
        "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n"
        "–û–±–µ—Ä–∏ —Ç–µ, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:\n",
        reply_markup=property_type_keyboard()
    )
    await FilterStates.waiting_for_property_type.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_db_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    await state.update_data(user_db_id=user_db_id, telegram_id=telegram_id)


@dp.message_handler(commands=['menu'])
async def show_main_menu(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=main_menu_keyboard()
    )


"""
CREATE TABLE IF NOT EXISTS user_filters (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    property_type VARCHAR(50),
    city VARCHAR(255),
    rooms_count INTEGER[] NOT NULL,
    price_min NUMERIC,
    price_max NUMERIC,
);

"""


@dp.callback_query_handler(lambda c: c.data == 'menu_my_subscription')
async def my_subscription_handler(callback_query: types.CallbackQuery):
    # You can fetch subscription status from DB:
    user_id = callback_query.from_user.id
    subscription_data = get_subscription_data_for_user(user_id)
    subscription_valid_until = get_subscription_until_for_user(user_id)
    text = f"""–î–µ—Ç–∞–ª—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:
     - üèôÔ∏è –ú—ñ—Å—Ç–æ: {subscription_data['city']}
     - üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {subscription_data['property_type']}
     - üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {subscription_data['rooms_count']}
     - üí∞ –¶—ñ–Ω–∞: {subscription_data['price_min']}-{subscription_data['price_max']}

     –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_valid_until}
     """
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=subscription_menu_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'subs_disable')
async def disable_subscription_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # Call your DB method to disable subscription
    disable_subscription_for_user(user_id)
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞.",
        reply_markup=main_menu_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'subs_enable')
async def enable_subscription_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    enable_subscription_for_user(user_id)
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.",
        reply_markup=main_menu_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'subs_edit')
async def edit_subscription_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–î–∞–≤–∞–π—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.",
        # Maybe show some filters, etc.
    )


@dp.callback_query_handler(lambda c: c.data == 'subs_back')
async def subscription_back_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
        reply_markup=main_menu_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'menu_how_to_use')
async def how_to_use_handler(callback_query: types.CallbackQuery):
    text = (
        "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
        "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞.\n"
        "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.\n"
        "3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
    )
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=how_to_use_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'contact_support')
async def contact_support_handler(callback_query: types.CallbackQuery):
    # If you want them to message an admin directly, you can provide a link or instructions.
    # Or you can set up a separate "Support chat" logic. For simplicity:
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º..."
    )


@dp.callback_query_handler(lambda c: c.data == 'menu_tech_support')
async def menu_tech_support_handler(callback_query: types.CallbackQuery):
    # Same as above or you can show a new keyboard
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è.",
        reply_markup=tech_support_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def back_to_main_menu_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('property_type_'),
                           state=FilterStates.waiting_for_property_type)
async def process_property_type(callback_query: types.CallbackQuery, state: FSMContext):
    property_type = callback_query.data.split('_')[-1]
    await state.update_data(property_type=property_type)

    await callback_query.message.answer(
        "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        reply_markup=city_keyboard(AVAILABLE_CITIES)
    )
    await FilterStates.waiting_for_city.set()
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('city_'), state=FilterStates.waiting_for_city)
async def process_city(callback_query: types.CallbackQuery, state: FSMContext):
    city = callback_query.data.split('_', 1)[1].capitalize()
    if city not in AVAILABLE_CITIES:
        await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
        return
    await state.update_data(city=city)

    await callback_query.message.answer(
        "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
        reply_markup=rooms_keyboard()
    )
    await FilterStates.waiting_for_rooms.set()
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('rooms_'), state=FilterStates.waiting_for_rooms)
async def process_rooms(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_data = await state.get_data()
    city = user_data.get('city')
    selected_rooms = user_data.get('rooms', [])

    if data == 'rooms_done':
        if not selected_rooms:
            await callback_query.message.answer("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç.")
            return
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
        await callback_query.answer()
    elif data == 'rooms_any':
        await state.update_data(rooms=None)
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
        await callback_query.answer()
    elif data.startswith('rooms_'):
        try:
            rooms_number = int(data.split('_')[1])
            if rooms_number in selected_rooms:
                selected_rooms.remove(rooms_number)
            else:
                selected_rooms.append(rooms_number)
            await state.update_data(rooms=selected_rooms)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            await callback_query.message.edit_reply_markup(reply_markup=rooms_keyboard(selected_rooms))
            await callback_query.answer()
        except (IndexError, ValueError):
            await callback_query.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç.")
            await callback_query.answer()
    else:
        await callback_query.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
        await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('price_'), state=FilterStates.waiting_for_price)
async def process_price(callback_query: types.CallbackQuery, state: FSMContext):
    # callback_query.data might look like "price_0_5000" or "price_5000_7000" or "price_15000_any"
    parts = callback_query.data.split("_")
    if len(parts) == 3 and parts[2] == "any":
        low = int(parts[1])  # 15000
        high = None
    else:
        low = int(parts[1])
        high = int(parts[2])

    text_range = f"{low}+ –≥—Ä–Ω." if not high else f"{low}‚Äì{high} –≥—Ä–Ω."
    await callback_query.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω: {text_range}")

    await state.update_data(price_min=low, price_max=high)

    # Instead of waiting for a new button press, call the "process_basic_params"
    # function directly, so it shows the summary + confirmation buttons.
    await process_basic_params(callback_query, state)

    # Mark it done, so we are now in waiting_for_confirmation
    # (Inside process_basic_params you set waiting_for_confirmation,
    #  so no need to set it again here.)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirmation_'),
                           state=FilterStates.waiting_for_basic_params)
async def process_basic_params(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    property_type = user_data.get('property_type')
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(property_type, "")

    city = user_data.get('city')
    rooms = ', '.join(map(str, user_data.get('rooms'))) if user_data.get('rooms') else '–ù–µ –≤–∞–∂–ª–∏–≤–æ'

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    price_min = user_data.get('price_min')
    price_max = user_data.get('price_max')
    if price_min and price_max:
        price_range = f"{price_min}-{price_max}"
    elif price_min and not price_max:
        price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
    elif not price_min and price_max:
        price_range = f"–î–æ {price_max}"
    else:
        price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    summary = (
        f"**–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:**\n"
        f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n"
    )

    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ Markdown
    from aiogram.utils.markdown import escape_md
    summary_escaped = escape_md(summary).replace('\\', '')

    await callback_query.message.answer(
        summary_escaped,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=confirmation_keyboard()
    )
    await FilterStates.waiting_for_confirmation.set()
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith="edit_parameters"), state=FilterStates.waiting_for_confirmation)
async def edit_parameters(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
        reply_markup=edit_parameters_keyboard()
    )
    await callback_query.answer()


def fetch_ads_for_period(filters, days, limit=3):
    """
    Query your local ads table, matching the user‚Äôs filters,
    for ads from the last `days` days. Return up to `limit` ads.
    """
    # We assume you have a function `execute_query(sql, params, fetch=True)`
    where_clauses = []
    params = []

    if filters.get('city'):
        where_clauses.append("city = %s")
        params.append(filters['city'])

    if filters.get('property_type'):
        where_clauses.append("property_type = %s")
        params.append(filters['property_type'])

    if filters.get('rooms') is not None:
        # filters['rooms'] is a list, so let's match any in that list
        # E.g. rooms_count is stored as integer in "ads" table
        # We'll check "rooms_count = ANY(...)"
        where_clauses.append("rooms_count = ANY(%s)")
        params.append(filters['rooms'])

    if filters.get('price_min') is not None:
        where_clauses.append("price >= %s")
        params.append(filters['price_min'])

    if filters.get('price_max') is not None:
        where_clauses.append("price <= %s")
        params.append(filters['price_max'])

    # Now add the time window
    where_clauses.append("insert_time >= NOW() - interval '%s day'")
    params.append(days)

    # Build final WHERE
    where_sql = " AND ".join(where_clauses)
    sql = f"""
        SELECT *
        FROM ads
        WHERE {where_sql}
        ORDER BY insert_time DESC
        LIMIT {limit}
    """
    logging.info('SQL: %s', sql)
    logging.info('Params: %s', params)
    rows = execute_query(sql, params, fetch=True)
    return rows


def build_ad_text(ad_row):
    # For example:
    text = (
        f"üí∞ –¶—ñ–Ω–∞: {int(ad_row.get('price'))} –≥—Ä–Ω.\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {ad_row.get('city')}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {ad_row.get('address')}\n"
        f"üõèÔ∏è –ö—ñ–ª-—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {ad_row.get('rooms_count')}\n"
        f"üìê –ü–ª–æ—â–∞: {ad_row.get('square_feet')} –∫–≤.–º.\n"
        f"üè¢ –ü–æ–≤–µ—Ä—Ö: {ad_row.get('floor')} –∏–∑ {ad_row.get('total_floors')}\n"
        f"üìù –û–ø–∏—Å: {ad_row.get('description')[:75]}...\n"
    )
    return text


def get_ad_images(ad):
    ad_id = ad.get('id')
    sql_check = "SELECT * FROM ad_images WHERE ad_id = %s"
    rows = execute_query(sql_check, [ad_id], fetch=True)
    if rows:
        return [row["image_url"] for row in rows]


@dp.callback_query_handler(Text(startswith="subscribe"), state=FilterStates.waiting_for_confirmation)
async def subscribe(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    logging.info('subscribe: user_data: %s', user_data)
    user_db_id = user_data.get('user_db_id')  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = user_data.get('telegram_id')
    logging.info('User DB ID: %s', user_db_id)

    if not user_db_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await callback_query.answer()
        return

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    filters = {
        'property_type': user_data.get('property_type'),
        'city': user_data.get('city'),
        'rooms': user_data.get('rooms'),  # –°–ø–∏—Å–æ–∫ –∞–±–æ None
        'price_min': user_data.get('price_min'),
        'price_max': user_data.get('price_max'),
    }

    logging.info('Filters')
    logging.info(filters)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    update_user_filter(user_db_id, filters)

    # 1) Let user know subscription is set
    await callback_query.message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å!")

    # 2) Now do the multi-step check in local DB
    #    We'll define a helper function below or inline.
    logging.info('Fetch ads for period')
    final_ads = []
    for days_limit in [1, 3, 7, 14, 30]:
        ads = fetch_ads_for_period(filters, days_limit, limit=3)
        if len(ads) >= 3:
            final_ads = ads
            # We found enough ads => break out
            break

    if final_ads:
        # We found >=3 ads in last days_limit
        message_ending = '–¥–µ–Ω—å' if days_limit == 1 else '–¥–Ω—ñ–≤'
        await callback_query.message.answer(
            f"–û—Å—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days_limit} {message_ending}:"
        )
        # Send them (as 3 separate messages, or combine them)
        for ad in final_ads:
            s3_image_links = get_ad_images(ad)
            text = build_ad_text(ad)
            # await callback_query.message.answer(text)

            # We assume 'image_url' and 'resource_url' exist in your DB row.
            # For example, 'image_url' might be `ad.get("image_url")`
            # or 's3_image_url'.
            # 'resource_url' might be "https://flatfy.ua/uk/redirect/..."
            resource_url = ad.get("resource_url")

            # Now dispatch the Celery task:
            celery_app.send_task(
                # "telegram_service.app.tasks.send_message_task",
                "telegram_service.app.tasks.send_ad_with_photos",
                args=[telegram_id, text, s3_image_links, resource_url]
            )
    else:
        # We never found 3 ads even in last 30 days
        await callback_query.message.answer(
            "–í–∞—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä—É –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ, —â–æ –º–∞–π–∂–µ –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞–≤—ñ—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∞–±–æ –∑–∞—á–µ–∫–∞–π—Ç–µ. –ú–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ, —â–æ–π–Ω–æ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
        )

    # 3) Optionally say: "–ú–∏ —Ç–∞–∫–æ–∂ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—Å—ñ –º–∞–π–±—É—Ç–Ω—ñ..."
    await callback_query.message.answer("–ú–∏ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–π–Ω–æ –≤–æ–Ω–∏ –∑‚Äô—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è!")

    # 4) End the state
    await state.finish()
    await callback_query.answer()

    # 5) Optional: send a task to do further real-time scraping or notification
    #    (Though you just gave them "existing" ads from the DB.)
    celery_app.send_task(
        'notifier_service.app.tasks.notify_user_with_ads',
        args=[telegram_id, filters]
    )


@dp.callback_query_handler(Text(startswith="edit_"), state=FilterStates.waiting_for_confirmation)
async def handle_edit(callback_query: types.CallbackQuery, state: FSMContext):
    edit_field = callback_query.data.split('_', 1)[1]
    user_data = await state.get_data()
    city = user_data.get('city')

    if edit_field == "property_type":
        await callback_query.message.answer(
            "üè∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:",
            reply_markup=property_type_keyboard()
        )
        await FilterStates.waiting_for_property_type.set()
    elif edit_field == "city":
        await callback_query.message.answer(
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
            reply_markup=city_keyboard(AVAILABLE_CITIES)
        )
        await FilterStates.waiting_for_city.set()
    elif edit_field == "rooms":
        user_data = await state.get_data()
        selected_rooms = user_data.get('rooms', [])
        await callback_query.message.answer(
            "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
            reply_markup=rooms_keyboard(selected_rooms)
        )
        await FilterStates.waiting_for_rooms.set()
    elif edit_field == "price":
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
    elif edit_field == "floor":
        # call your function to handle floor editing
        await callback_query.message.answer("üè¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö:", reply_markup=floor_keyboard())
        # optionally change state, etc.
    elif edit_field == "cancel_edit":
        await callback_query.message.answer("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=confirmation_keyboard())
        await FilterStates.waiting_for_confirmation.set()
    else:
        await callback_query.message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")

    await callback_query.answer()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—É –¥—ñ—é"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())


async def show_advanced_options(message: types.Message, state: FSMContext):
    # Build a keyboard for advanced fields
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–ü–æ–≤–µ—Ä—Ö", callback_data="edit_floor"),
    )
    keyboard.add(
        InlineKeyboardButton("–ó —Ç–≤–∞—Ä–∏–Ω–∞–º–∏?", callback_data="pets_allowed"),
    )
    keyboard.add(
        InlineKeyboardButton("–í—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞?", callback_data="without_broker"),
    )
    # "–ì–æ—Ç–æ–≤–æ" -> return to summary
    keyboard.add(InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥", callback_data="advanced_done"))

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "advanced_search", state=FilterStates.waiting_for_confirmation)
async def advanced_search_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "edit_floor_max", state="*")
async def edit_floor_max_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # Show some example floors from 1..25 or 1..10
    keyboard = InlineKeyboardMarkup(row_width=5)
    floors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Adjust as you like
    for f in floors:
        keyboard.insert(InlineKeyboardButton(str(f), callback_data=f"floor_max_{f}"))
    keyboard.add(InlineKeyboardButton("–î–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤", callback_data="return_to_advanced_menu"))

    await callback_query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ–≤–µ—Ä—Ö:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("floor_max_"), state="*")
async def set_floor_max(callback_query: types.CallbackQuery, state: FSMContext):
    # parse the chosen floor
    chosen_floor = int(callback_query.data.split("_")[2])  # "floor_max_6" -> 6
    await state.update_data(floor_max=chosen_floor)

    await callback_query.message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ–≤–µ—Ä—Ö —Ç–µ–ø–µ—Ä {chosen_floor}.")
    # Optionally show advanced menu again
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "return_to_advanced_menu", state="*")
async def return_to_advanced_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "edit_is_not_first_floor", state="*")
async def edit_is_not_first_floor_handler(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–¢–∞–∫", callback_data="is_not_first_floor_yes"))
    keyboard.add(InlineKeyboardButton("–ù—ñ", callback_data="is_not_first_floor_no"))
    keyboard.add(InlineKeyboardButton("–î–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤", callback_data="return_to_advanced_menu"))

    await callback_query.message.answer("–ß–∏ –≤–∏–∫–ª—é—á–∞—Ç–∏ –ø–µ—Ä—à–∏–π –ø–æ–≤–µ—Ä—Ö?", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("is_not_first_floor_"), state="*")
async def set_is_not_first_floor(callback_query: types.CallbackQuery, state: FSMContext):
    # either "yes" or "no"
    value = callback_query.data.split("_")[-1]  # yes / no
    # The actual param for flatfy would be `is_not_first_floor=yes` or `no`
    await state.update_data(is_not_first_floor=value)

    text = "–í–∏–∫–ª—é—á–∞—é –ø–µ—Ä—à–∏–π –ø–æ–≤–µ—Ä—Ö" if value == "yes" else "–ü–µ—Ä—à–∏–π –ø–æ–≤–µ—Ä—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π"
    await callback_query.message.answer(text)
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "edit_last_floor", state="*")
async def edit_last_floor_handler(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–¢–∞–∫", callback_data="last_floor_yes"),
        InlineKeyboardButton("–ù—ñ", callback_data="last_floor_no")
    )
    keyboard.add(InlineKeyboardButton("–î–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤", callback_data="return_to_advanced_menu"))

    await callback_query.message.answer("–í–∏–∫–ª—é—á–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö?", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("last_floor_"), state="*")
async def set_last_floor(callback_query: types.CallbackQuery, state: FSMContext):
    value = callback_query.data.split("_")[-1]  # yes / no
    await state.update_data(last_floor=value)

    text = "–í–∏–∫–ª—é—á–∞—é –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö" if value == "no" else "–¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö"
    # Actually, for flatfy: "last_floor=no" means do not show last floor ads?
    await callback_query.message.answer(f"last_floor={value}")
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "pets_allowed", state="*")
async def edit_pets_allowed_handler(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–¢–∞–∫", callback_data="pets_allowed_yes"),
        InlineKeyboardButton("–ù—ñ", callback_data="pets_allowed_no"),
    )
    keyboard.add(InlineKeyboardButton("–î–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤", callback_data="return_to_advanced_menu"))

    await callback_query.message.answer("üê∂üêàüêπ –ß–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏?", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("pets_allowed_"), state="*")
async def set_pets_allowed(callback_query: types.CallbackQuery, state: FSMContext):
    value = callback_query.data.split("_")[-1]  # yes / no / some
    mapped_values = {'yes': '–¢–∞–∫', 'no': '–ù—ñ'}
    ua_lang_value = mapped_values.get(value)
    await state.update_data(pets_allowed_full=value)
    await callback_query.message.answer(f'–û–±—Ä–∞–Ω–æ: "{ua_lang_value}"')
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "without_broker", state="*")
async def edit_without_broker_handler(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–í—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞", callback_data="without_broker_owner"),
        InlineKeyboardButton("–£—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", callback_data="without_broker_all")
    )
    keyboard.add(InlineKeyboardButton("–î–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤", callback_data="return_to_advanced_menu"))

    await callback_query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –æ–≥–æ–ª–æ—à–µ–Ω—å:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("without_broker_"), state="*")
async def set_without_broker(callback_query: types.CallbackQuery, state: FSMContext):
    choice = callback_query.data.split("_")[-1]  # "owner" or "all"
    if choice == "owner":
        await state.update_data(without_broker="owner")
        text = "–¢—ñ–ª—å–∫–∏ –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞"
    else:
        await state.update_data(without_broker=None)  # or just remove param
        text = "–£—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"

    await callback_query.message.answer(f'–û–±—Ä–∞–Ω–æ: "{text}"')
    await show_advanced_options(callback_query.message, state)
    await callback_query.answer()


def build_full_summary(data: dict) -> str:
    # property_type_apartment, property_type_house, property_type_room
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    property_type = data.get("property_type", "")
    ua_lang_property_type = mapping_property.get(property_type, "")

    city = data.get("city", "")
    rooms = data.get("rooms", [])  # list
    price_min = data.get("price_min", "")
    price_max = data.get("price_max", "")
    logging.info('price_min: ')
    logging.info(price_min)
    logging.info('price_max: ')
    logging.info(price_max)

    floor_max = data.get("floor_max")
    is_not_first_floor = data.get("is_not_first_floor")
    last_floor = data.get("last_floor")
    pets_allowed_full = data.get("pets_allowed_full")
    without_broker = data.get("without_broker")

    # build lines
    lines = []
    lines.append(f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}")
    lines.append(f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}")
    lines.append(f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {', '.join(map(str, rooms)) if rooms else '–ù–µ –≤–∞–∂–ª–∏–≤–æ'}")

    # Price range
    if price_min and price_max:
        price_range = f"–≤—ñ–¥ {price_min} –¥–æ {price_max}"
        lines.append(f"üí∞ –¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: {price_range} –≥—Ä–Ω")
    elif price_min and not price_max:
        lines.append(f"–≤—ñ–¥ {price_min} –≥—Ä–Ω")
    elif price_max and not price_min:
        lines.append(f"–¥–æ {price_max} –≥—Ä–Ω")
    else:
        lines.append("üí∞ –¶—ñ–Ω–∞: –Ω–µ –≤–∞–∂–ª–∏–≤–æ")

    # ADVANCED
    if floor_max:
        lines.append(f"üè¢ –ü–æ–≤–µ—Ä—Ö–∏ –¥–æ: {floor_max}")
    if is_not_first_floor == "yes":
        lines.append("üè¢ –ù–µ –ø–µ—Ä—à–∏–π –ø–æ–≤–µ—Ä—Ö")
    elif is_not_first_floor == "no":
        lines.append("üè¢ –ü–µ—Ä—à–∏–π –ø–æ–≤–µ—Ä—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–æ")

    if last_floor == "yes":
        lines.append("üè¢ –¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö")
    elif last_floor == "no":
        lines.append("üè¢ –ù–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö")

    if pets_allowed_full:
        lines.append("üê∂üêàüêπ –î–æ–∑–≤–æ–ª–µ–Ω–æ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏")

    if without_broker == "owner":
        lines.append("üòé –¢—ñ–ª—å–∫–∏ –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞")

    return "**–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É**\n" + "\n".join(lines)


@dp.callback_query_handler(lambda c: c.data == "advanced_done", state="*")
async def advanced_done_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    summary = build_full_summary(user_data)  # We'll define build_full_summary below

    from aiogram.utils.markdown import escape_md
    summary_escaped = escape_md(summary)

    # A new keyboard that shows "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" or "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_parameters"),
        InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data="subscribe"),
    )

    await callback_query.message.answer(summary_escaped, parse_mode=ParseMode.MARKDOWN, reply_markup=kb)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "edit_floor", state="*")
async def edit_floor_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    floor_opts = user_data.get("floor_opts", {
        "not_first": False,
        "not_last": False,
        "floor_max_6": False,
        "floor_max_10": False,
        "floor_max_17": False,
        "only_last": False
    })
    await state.update_data(floor_opts=floor_opts)

    kb = floor_keyboard(floor_opts)
    await callback_query.message.answer("üè¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö:", reply_markup=kb)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("toggle_floor_"), state="*")
async def toggle_floor_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # e.g. toggle_floor_not_first, toggle_floor_only_last, toggle_floor_6 ...
    choice = callback_query.data.split("_", 2)[-1]  # "not_first", "not_last", "only_last", "6", "10", "17"
    user_data = await state.get_data()
    floor_opts = user_data.get("floor_opts", {
        "not_first": False,
        "not_last": False,
        "floor_max_6": False,
        "floor_max_10": False,
        "floor_max_17": False,
        "only_last": False
    })

    current_val = floor_opts.get(choice, False)
    new_val = not current_val
    floor_opts[choice] = new_val

    # Contradictions
    if choice == "only_last" and new_val is True:
        floor_opts["not_last"] = False
    if choice == "not_last" and new_val is True:
        floor_opts["only_last"] = False

    if choice in ["6", "10", "17"] and new_val is True:
        for other in ["6", "10", "17"]:
            if other != choice:
                floor_opts[f"floor_max_{other}"] = False

    await state.update_data(floor_opts=floor_opts)

    kb = floor_keyboard(floor_opts)  # ensure floor_keyboard also uses "not_first", "not_last", etc.

    try:
        await callback_query.message.edit_text(
            "üè¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö:",
            reply_markup=kb
        )
    except MessageNotModified:
        await callback_query.answer("–ù–µ–º–∞—î –∑–º—ñ–Ω.")

    await callback_query.answer()


def floor_opts_key(num_str):
    return f"floor_max_{num_str}"


@dp.callback_query_handler(lambda c: c.data == "floor_done", state="*")
async def floor_done_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    floor_opts = user_data.get("floor_opts", {})

    # Convert toggles to final fields
    # For example:
    #  - is_not_first_floor = "yes" if floor_opts["not_first"] else None
    #  - last_floor = "yes" if floor_opts["only_last"] else ("no" if floor_opts["not_last"] else None)
    #  - floor_max = 6 or 10 or 17 or None
    advanced_data = {}

    if floor_opts.get("not_first"):
        advanced_data["is_not_first_floor"] = "yes"
    else:
        advanced_data["is_not_first_floor"] = None

    if floor_opts.get("only_last"):
        advanced_data["last_floor"] = "yes"
    elif floor_opts.get("not_last"):
        advanced_data["last_floor"] = "no"
    else:
        advanced_data["last_floor"] = None

    if floor_opts.get("floor_max_6"):
        advanced_data["floor_max"] = 6
    elif floor_opts.get("floor_max_10"):
        advanced_data["floor_max"] = 10
    elif floor_opts.get("floor_max_17"):
        advanced_data["floor_max"] = 17
    else:
        advanced_data["floor_max"] = None

    # Save to state
    await state.update_data(**advanced_data)

    # Return to advanced menu or summary
    await callback_query.message.answer("üíæ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    # e.g. show advanced menu again
    # or show final summary

    # **Now** go back to the advanced options menu:
    await show_advanced_options(callback_query.message, state)

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "unsubscribe", state="*")
async def unsubscribe_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    # In DB, set user subscription inactive or remove user_filters
    # e.g.
    sql = "UPDATE users SET subscription_until = NOW() WHERE telegram_id = %s"
    execute_query(sql, [user_id])

    await callback_query.message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å.")
    await callback_query.answer()
