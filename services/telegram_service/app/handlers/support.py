import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from ..bot import dp, bot
from ..states.support_states import SupportStates
from ..keyboards import support_category_keyboard, support_redirect_keyboard, main_menu_keyboard

logger = logging.getLogger(__name__)


@dp.message_handler(lambda msg: msg.text == "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def handle_support_command(message: types.Message, state: FSMContext):
    """
    Start the support conversation by asking the user to choose a category.
    """
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=support_category_keyboard())
    await SupportStates.waiting_for_category.set()


@dp.message_handler(lambda msg: msg.text in ["–û–ø–ª–∞—Ç–∞", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏", "–Ü–Ω—à–µ"],
                    state=SupportStates.waiting_for_category)
async def process_support_category(message: types.Message, state: FSMContext):
    """
    Process the chosen support category.
    Based on the selection, generate a template message.
    """
    category = message.text
    if category == "–û–ø–ª–∞—Ç–∞":
        template = "–ü—Ä–∏–≤—ñ—Ç! –£ –º–µ–Ω–µ —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–æ–∂—ñ—Ç—å —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å."
    elif category == "–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏":
        template = "–ü—Ä–∏–≤—ñ—Ç! –Ø –∑—ñ—Ç–∫–Ω—É–≤—Å—è –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –ø—Ä–æ–±–ª–µ–º–æ—é. –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: "
    elif category == "–Ü–Ω—à–µ":
        template = "–ü—Ä–∏–≤—ñ—Ç! –£ –º–µ–Ω–µ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ü—Ä–æ—à—É –¥–æ–ø–æ–º–æ–≥–∏: "
    else:
        template = "–ü—Ä–∏–≤—ñ—Ç! –£ –º–µ–Ω–µ —î –ø–∏—Ç–∞–Ω–Ω—è."

    await state.finish()  # End the FSM as no further input is needed
    # Build an inline keyboard to redirect the user to support.
    # You can pass the lower-cased category as a parameter so the support system knows the context.
    kb = support_redirect_keyboard(template_data=category.lower())

    # Send the template message along with the inline button.
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
    await message.answer(f"{template}", reply_markup=kb)
    # await message.answer(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{template}",
    #                      reply_markup=kb)
    # Optionally, also display the main menu after.
    await message.answer("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
