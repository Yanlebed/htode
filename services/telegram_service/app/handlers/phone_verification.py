# services/telegram_service/app/handlers/phone_verification.py

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from ..bot import dp
from ..utils.message_utils import safe_send_message, safe_answer_callback_query
from common.verification.phone_service import (
    create_verification_code,
    verify_code,
    link_messenger_account,
    get_user_by_phone,
    transfer_subscriptions
)
from common.db.operations import get_db_user_id_by_telegram_id
from ..keyboards import (
    phone_request_keyboard,
    verification_code_keyboard,
    verification_success_keyboard,
    main_menu_keyboard
)

# Import service logger and logging utilities
from ... import logger
from common.utils.logging_config import log_operation, log_context


class PhoneVerificationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_confirmation = State()


@dp.message_handler(lambda msg: msg.text == "üì± –î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
@log_operation("start_phone_verification")
async def start_phone_verification(message: types.Message, state: FSMContext):
    """
    Start the phone verification process when user selects the menu option
    """
    user_id = message.from_user.id

    with log_context(logger, user_id=user_id, action="start_phone_verification"):
        await safe_send_message(
            chat_id=message.chat.id,
            text=(
                "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ —î–¥–∏–Ω–æ–≥–æ –≤—Ö–æ–¥—É –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, "
                "–±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–Ω–æ–ø–∫–æ—é '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É' –∞–±–æ "
                "–≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380991234567)."
            ),
            reply_markup=phone_request_keyboard()
        )
        await PhoneVerificationStates.waiting_for_phone.set()
        logger.info("Phone verification started", extra={"user_id": user_id})


@dp.message_handler(content_types=types.ContentType.CONTACT, state=PhoneVerificationStates.waiting_for_phone)
async def handle_contact(message: types.Message, state: FSMContext):
    """
    Handle phone number shared via contact
    """
    phone_number = message.contact.phone_number
    await process_phone_number(message, state, phone_number)


@dp.message_handler(state=PhoneVerificationStates.waiting_for_phone)
async def handle_phone_text(message: types.Message, state: FSMContext):
    """
    Handle phone number entered as text
    """
    phone_number = message.text.strip()
    await process_phone_number(message, state, phone_number)


async def process_phone_number(message: types.Message, state: FSMContext, phone_number: str):
    """
    Process the provided phone number and send verification code
    """
    # Store the phone number in state
    await state.update_data(phone_number=phone_number)

    # Generate and send verification code
    code = create_verification_code(phone_number)

    # In a production environment, you would send this code via SMS
    # For testing purposes, we're showing it directly in the chat
    await safe_send_message(
        chat_id=message.chat.id,
        text=(
            f"–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}.\n\n"
            f"‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –æ—Å—å –≤–∞—à –∫–æ–¥: {code}\n\n"
            "–£ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É –∫–æ–¥ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ SMS."
        ),
        reply_markup=verification_code_keyboard()
    )

    # Move to the next state
    await PhoneVerificationStates.waiting_for_code.set()


@dp.message_handler(state=PhoneVerificationStates.waiting_for_code)
async def handle_verification_code(message: types.Message, state: FSMContext):
    """
    Verify the code entered by the user
    """
    code = message.text.strip()
    user_data = await state.get_data()
    phone_number = user_data.get('phone_number')

    if not phone_number:
        await safe_send_message(
            chat_id=message.chat.id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        )
        await state.finish()
        return

    # Verify the code
    success, error_message = verify_code(phone_number, code)

    if not success:
        await safe_send_message(
            chat_id=message.chat.id,
            text=f"–ü–æ–º–∏–ª–∫–∞: {error_message}. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        )
        return

    # Code verified successfully
    telegram_id = message.from_user.id

    # Check if a user with this phone already exists
    existing_user = get_user_by_phone(phone_number)

    # Get the current user's ID in our database
    current_user_id = get_db_user_id_by_telegram_id(telegram_id)

    if existing_user and existing_user.get('telegram_id') != telegram_id:
        # User exists with this phone number but has a different telegram_id
        # Ask for confirmation to merge accounts
        await state.update_data(
            existing_user_id=existing_user['id'],
            current_user_id=current_user_id
        )

        await safe_send_message(
            chat_id=message.chat.id,
            text=(
                "–¶–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ —ñ–Ω—à–∏–º –æ–±–ª—ñ–∫–æ–≤–∏–º –∑–∞–ø–∏—Å–æ–º.\n\n"
                "–ë–∞–∂–∞—î—Ç–µ –æ–±'—î–¥–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –∑ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É?"
            ),
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–¢–∞–∫, –æ–±'—î–¥–Ω–∞—Ç–∏", callback_data="merge_accounts"),
                types.InlineKeyboardButton("–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_merge")
            )
        )

        await PhoneVerificationStates.waiting_for_confirmation.set()
    else:
        # No conflict, proceed with linking
        await handle_account_linking(message, state, phone_number, telegram_id, current_user_id)


@dp.callback_query_handler(lambda c: c.data == "merge_accounts", state=PhoneVerificationStates.waiting_for_confirmation)
async def confirm_merge_accounts(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handle account merging confirmation
    """
    user_data = await state.get_data()
    existing_user_id = user_data.get('existing_user_id')
    current_user_id = user_data.get('current_user_id')
    phone_number = user_data.get('phone_number')

    # Link current Telegram ID to the existing account
    telegram_id = callback_query.from_user.id

    # Transfer data before linking
    if current_user_id and current_user_id != existing_user_id:
        transfer_subscriptions(current_user_id, existing_user_id)

    # Link the current Telegram ID to the existing account with the phone number
    user_id = link_messenger_account(phone_number, "telegram", str(telegram_id))

    await safe_send_message(
        chat_id=callback_query.message.chat.id,
        text=(
            "–í–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±'—î–¥–Ω–∞–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–≤–æ—é –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö."
        ),
        reply_markup=verification_success_keyboard()
    )

    await state.finish()
    await safe_answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "cancel_merge", state=PhoneVerificationStates.waiting_for_confirmation)
async def cancel_merge_accounts(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handle cancellation of account merging
    """
    await safe_send_message(
        chat_id=callback_query.message.chat.id,
        text="–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –±—É–ª–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ.",
        reply_markup=main_menu_keyboard()
    )

    await state.finish()
    await safe_answer_callback_query(callback_query.id)


async def handle_account_linking(message: types.Message, state: FSMContext, phone_number: str, telegram_id: int,
                                 user_id: int):
    """
    Handle linking a phone number to an account
    """
    # Link the phone number to the user
    user_id = link_messenger_account(phone_number, "telegram", str(telegram_id))

    await safe_send_message(
        chat_id=message.chat.id,
        text=(
            "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–≤–æ—é –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö —Ç–∞ –≤ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö."
        ),
        reply_markup=verification_success_keyboard()
    )

    await state.finish()