# services/telegram_service/app/handlers/basic_handlers.py

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

from ..bot import dp
from ..states.basis_states import FilterStates
from ..keyboards import (
    property_type_keyboard, city_keyboard, rooms_keyboard,
    price_keyboard, confirmation_keyboard,
    edit_parameters_keyboard, floor_keyboard
)
from common.db.models import get_or_create_user

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç (–º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_db_id = get_or_create_user(telegram_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
        "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n"
        "–û–±–µ—Ä–∏ —Ç–µ, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:\n",
        reply_markup=property_type_keyboard()
    )
    await FilterStates.waiting_for_property_type.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_db_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    await state.update_data(user_db_id=user_db_id, telegram_id=telegram_id)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('property_type_'),
                           state=FilterStates.waiting_for_property_type)
async def process_property_type(callback_query: types.CallbackQuery, state: FSMContext):
    property_type = callback_query.data.split('_')[-1]
    await state.update_data(property_type=property_type)

    await callback_query.message.answer(
        "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        reply_markup=city_keyboard(AVAILABLE_CITIES)
    )
    await FilterStates.waiting_for_city.set()
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('city_'), state=FilterStates.waiting_for_city)
async def process_city(callback_query: types.CallbackQuery, state: FSMContext):
    city = callback_query.data.split('_', 1)[1].capitalize()
    if city not in AVAILABLE_CITIES:
        await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
        return
    await state.update_data(city=city)

    await callback_query.message.answer(
        "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
        reply_markup=rooms_keyboard()
    )
    await FilterStates.waiting_for_rooms.set()
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('rooms_'), state=FilterStates.waiting_for_rooms)
async def process_rooms(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_data = await state.get_data()
    city = user_data.get('city')
    selected_rooms = user_data.get('rooms', [])

    if data == 'rooms_done':
        if not selected_rooms:
            await callback_query.message.answer("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç.")
            return
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
        await callback_query.answer()
    elif data == 'rooms_any':
        await state.update_data(rooms=None)
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
        await callback_query.answer()
    elif data.startswith('rooms_'):
        try:
            rooms_number = int(data.split('_')[1])
            if rooms_number in selected_rooms:
                selected_rooms.remove(rooms_number)
            else:
                selected_rooms.append(rooms_number)
            await state.update_data(rooms=selected_rooms)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            await callback_query.message.edit_reply_markup(reply_markup=rooms_keyboard(selected_rooms))
            await callback_query.answer()
        except (IndexError, ValueError):
            await callback_query.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç.")
            await callback_query.answer()
    else:
        await callback_query.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
        await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('price_'), state=FilterStates.waiting_for_price)
async def process_price(callback_query: types.CallbackQuery, state: FSMContext):
    # callback_query.data might look like "price_0_5000" or "price_5000_7000" or "price_15000_any"
    parts = callback_query.data.split("_")
    if len(parts) == 3 and parts[2] == "any":
        low = int(parts[1])  # 15000
        high = None
    else:
        low = int(parts[1])
        high = int(parts[2])

    text_range = f"{low}+ –≥—Ä–Ω." if not high else f"{low}‚Äì{high} –≥—Ä–Ω."
    await callback_query.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω: {text_range}")

    await state.update_data(price_min=low, price_max=high)

    # Instead of waiting for a new button press, call the "process_basic_params"
    # function directly, so it shows the summary + confirmation buttons.
    await process_basic_params(callback_query, state)

    # Mark it done, so we are now in waiting_for_confirmation
    # (Inside process_basic_params you set waiting_for_confirmation,
    #  so no need to set it again here.)
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith="edit_"), state=FilterStates.waiting_for_confirmation)
async def handle_edit(callback_query: types.CallbackQuery, state: FSMContext):
    edit_field = callback_query.data.split('_', 1)[1]
    user_data = await state.get_data()
    city = user_data.get('city')

    if edit_field == "property_type":
        await callback_query.message.answer(
            "üè∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:",
            reply_markup=property_type_keyboard()
        )
        await FilterStates.waiting_for_property_type.set()
    elif edit_field == "city":
        await callback_query.message.answer(
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
            reply_markup=city_keyboard(AVAILABLE_CITIES)
        )
        await FilterStates.waiting_for_city.set()
    elif edit_field == "rooms":
        user_data = await state.get_data()
        selected_rooms = user_data.get('rooms', [])
        await callback_query.message.answer(
            "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
            reply_markup=rooms_keyboard(selected_rooms)
        )
        await FilterStates.waiting_for_rooms.set()
    elif edit_field == "price":
        await callback_query.message.answer(
            "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
            reply_markup=price_keyboard(city=city)
        )
        await FilterStates.waiting_for_price.set()
    elif edit_field == "floor":
        # call your function to handle floor editing
        await callback_query.message.answer("üè¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö:", reply_markup=floor_keyboard())
        # optionally change state, etc.
    elif edit_field == "cancel_edit":
        await callback_query.message.answer("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=confirmation_keyboard())
        await FilterStates.waiting_for_confirmation.set()
    else:
        await callback_query.message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirmation_'),
                           state=FilterStates.waiting_for_basic_params)
async def process_basic_params(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    property_type = user_data.get('property_type')
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(property_type, "")

    city = user_data.get('city')
    rooms = ', '.join(map(str, user_data.get('rooms'))) if user_data.get('rooms') else '–ù–µ –≤–∞–∂–ª–∏–≤–æ'

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    price_min = user_data.get('price_min')
    price_max = user_data.get('price_max')
    if price_min and price_max:
        price_range = f"{price_min}-{price_max}"
    elif price_min and not price_max:
        price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
    elif not price_min and price_max:
        price_range = f"–î–æ {price_max}"
    else:
        price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    summary = (
        f"**–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:**\n"
        f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n"
    )

    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ Markdown
    from aiogram.utils.markdown import escape_md
    summary_escaped = escape_md(summary).replace('\\', '')

    await callback_query.message.answer(
        summary_escaped,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=confirmation_keyboard()
    )
    await FilterStates.waiting_for_confirmation.set()
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith="edit_parameters"), state=FilterStates.waiting_for_confirmation)
async def edit_parameters(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
        reply_markup=edit_parameters_keyboard()
    )
    await callback_query.answer()
