# services/viber_service/app/handlers/basic_handlers.py

import logging

from ..bot import state_manager
from ..utils.message_utils import safe_send_message
from viberbot.api.messages import TextMessage
from common.db.models import (
    get_or_create_user,
    update_user_filter,
    start_free_subscription_of_user
)
from common.celery_app import celery_app

logger = logging.getLogger(__name__)

# Define states
STATE_START = "start"
STATE_WAITING_PROPERTY_TYPE = "waiting_property_type"
STATE_WAITING_CITY = "waiting_city"
STATE_WAITING_ROOMS = "waiting_rooms"
STATE_WAITING_PRICE = "waiting_price"
STATE_CONFIRMATION = "confirmation"
STATE_EDITING_PARAMETERS = "editing_parameters"

from ..flow_integration import check_and_process_flow

# City list (same as in your Telegram bot)
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']


async def handle_message(user_id, message):
    """Handle text messages from users asynchronously"""
    if not isinstance(message, TextMessage):
        # For now, we only handle text messages
        await safe_send_message(user_id, "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    text = message.text

    # ADDED: First check if a flow should handle this message
    if await check_and_process_flow(user_id, text):
        # Message was handled by a flow, no further processing needed
        return

    # Rest of the original function continues below
    # Get user state from Redis
    user_data = await state_manager.get_state(user_id) or {"state": STATE_START}
    current_state = user_data.get("state", STATE_START)

    # Handle phone verification states
    from .phone_verification import (
        STATE_WAITING_FOR_PHONE,
        STATE_WAITING_FOR_CODE,
        STATE_WAITING_FOR_CONFIRMATION,
        handle_phone_input,
        handle_verification_code,
        handle_merge_confirmation
    )

    # Check for verification flow states first
    if current_state == STATE_WAITING_FOR_PHONE:
        await handle_phone_input(user_id, text)
        return
    elif current_state == STATE_WAITING_FOR_CODE:
        await handle_verification_code(user_id, text)
        return
    elif current_state == STATE_WAITING_FOR_CONFIRMATION:
        await handle_merge_confirmation(user_id, text)
        return

    # If no state or new user, create user_db_id
    if "user_db_id" not in user_data:
        user_db_id = get_or_create_user(user_id, messenger_type="viber")
        await state_manager.update_state(user_id, {
            "user_db_id": user_db_id
        })

    # Handle commands first
    if text == "/start":
        await handle_start_command(user_id)
        return
    elif text == "/menu":
        await handle_menu_command(user_id)
        return

    # Handle based on current state
    if current_state == STATE_START:
        await handle_start_command(user_id)
    elif current_state == STATE_WAITING_PROPERTY_TYPE:
        await handle_property_type(user_id, text)
    elif current_state == STATE_WAITING_CITY:
        await handle_city(user_id, text)
    elif current_state == STATE_WAITING_ROOMS:
        await handle_rooms(user_id, text)
    elif current_state == STATE_WAITING_PRICE:
        await handle_price(user_id, text)
    elif current_state == STATE_CONFIRMATION:
        await handle_confirmation(user_id, text)
    elif current_state == STATE_EDITING_PARAMETERS:
        await handle_edit_parameters(user_id, text)
    else:
        # Handle main menu options
        await handle_menu_option(user_id, text)


async def handle_conversation_started(user_id, viber_request):
    """Handle conversation started event asynchronously"""
    # Send welcome message with main menu
    await safe_send_message(
        user_id,
        "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
        "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n"
        "–û–±–µ—Ä–∏ —Ç–µ, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:\n",
        keyboard=create_property_type_keyboard()
    )

    # Store user state in Redis
    await state_manager.set_state(user_id, {
        "state": STATE_WAITING_PROPERTY_TYPE
    })

    # Create user in database
    viber_id = viber_request.user.id
    user_db_id = get_or_create_user(viber_id, messenger_type="viber")
    await state_manager.update_state(user_id, {
        "user_db_id": user_db_id
    })


async def handle_subscribed(user_id):
    """Handle user subscription to bot asynchronously"""
    await safe_send_message(
        user_id,
        "–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞!",
        keyboard=create_main_menu_keyboard()
    )


async def handle_start_command(user_id):
    """Handle /start command asynchronously"""
    await safe_send_message(
        user_id,
        "–ü—Ä–∏–≤—ñ—Ç!üëã –Ø –±–æ—Ç –∑ –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "–ó—ñ –º–Ω–æ—é –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏.\n"
        "–£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ 7 –¥–Ω—ñ–≤.\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n"
        "–û–±–µ—Ä–∏ —Ç–µ, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:\n",
        keyboard=create_property_type_keyboard()
    )

    # Store user state in Redis
    await state_manager.set_state(user_id, {
        "state": STATE_WAITING_PROPERTY_TYPE
    })

    # Create user in database if not exists
    user_db_id = get_or_create_user(user_id, messenger_type="viber")
    await state_manager.update_state(user_id, {
        "user_db_id": user_db_id
    })


async def handle_menu_command(user_id):
    """Handle /menu command asynchronously"""
    menu_text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:"

    # Reset state to start
    await state_manager.update_state(user_id, {
        "state": STATE_START
    })

    await safe_send_message(
        user_id,
        menu_text,
        keyboard=create_main_menu_keyboard()
    )


def create_property_type_keyboard():
    """Create keyboard for property type selection"""
    return {
        "Type": "keyboard",
        "Buttons": [
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
                "ActionType": "reply",
                "ActionBody": "apartment"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–ë—É–¥–∏–Ω–æ–∫",
                "ActionType": "reply",
                "ActionBody": "house"
            }
        ]
    }


def create_main_menu_keyboard():
    """Create main menu keyboard"""
    return {
        "Type": "keyboard",
        "Buttons": [
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏",
                "ActionType": "reply",
                "ActionBody": "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ",
                "ActionType": "reply",
                "ActionBody": "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?",
                "ActionType": "reply",
                "ActionBody": "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
                "ActionType": "reply",
                "ActionBody": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
                "ActionType": "reply",
                "ActionBody": "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                "ActionType": "reply",
                "ActionBody": "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            }
        ]
    }


async def handle_property_type(user_id, text):
    """Handle property type selection asynchronously"""
    property_mapping = {
        "apartment": "apartment",
        "house": "house",
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞": "apartment",
        "–±—É–¥–∏–Ω–æ–∫": "house"
    }

    text_lower = text.lower().strip()
    if text_lower in property_mapping:
        property_type = property_mapping[text_lower]
        # Update user state
        await state_manager.update_state(user_id, {
            "property_type": property_type,
            "state": STATE_WAITING_CITY
        })

        # Create city keyboard
        keyboard = create_city_keyboard(AVAILABLE_CITIES)

        # Move to city selection
        await safe_send_message(
            user_id,
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
            keyboard=keyboard
        )
    else:
        await safe_send_message(
            user_id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:",
            keyboard=create_property_type_keyboard()
        )


def create_city_keyboard(cities):
    """Create keyboard for city selection"""
    buttons = []

    # Create buttons for cities
    for city in cities:
        buttons.append({
            "Columns": 3,
            "Rows": 1,
            "Text": city,
            "ActionType": "reply",
            "ActionBody": f"city_{city.lower()}"
        })

    return {
        "Type": "keyboard",
        "ButtonsGroupColumns": 6,
        "ButtonsGroupRows": 7,
        "Buttons": buttons
    }


async def handle_city(user_id, text):
    """Handle city selection asynchronously"""
    # Check if input starts with "city_"
    if text.startswith("city_"):
        city_name = text.split("_", 1)[1].capitalize()

        # Check if city is in available cities list
        if city_name.lower() in [city.lower() for city in AVAILABLE_CITIES]:
            # Get city with proper capitalization
            for city in AVAILABLE_CITIES:
                if city.lower() == city_name.lower():
                    city_name = city
                    break

            # Update state with city
            await state_manager.update_state(user_id, {
                "city": city_name,
                "state": STATE_WAITING_ROOMS
            })

            # Move to rooms selection
            keyboard = create_rooms_keyboard()
            await safe_send_message(
                user_id,
                "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
                keyboard=keyboard
            )
        else:
            await safe_send_message(
                user_id,
                "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.",
                keyboard=create_city_keyboard(AVAILABLE_CITIES)
            )
    else:
        # Try to match city name without prefix
        for city in AVAILABLE_CITIES:
            if city.lower() == text.lower():
                await state_manager.update_state(user_id, {
                    "city": city,
                    "state": STATE_WAITING_ROOMS
                })

                # Move to rooms selection
                keyboard = create_rooms_keyboard()
                await safe_send_message(
                    user_id,
                    "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
                    keyboard=keyboard
                )
                return

        # No match found
        await safe_send_message(
            user_id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.",
            keyboard=create_city_keyboard(AVAILABLE_CITIES)
        )


def create_rooms_keyboard(selected_rooms=None):
    """Create keyboard for room selection"""
    if selected_rooms is None:
        selected_rooms = []

    buttons = []

    # Add number buttons 1-5
    for room in range(1, 6):
        text = f"‚úÖ {room}" if room in selected_rooms else f"{room}"
        buttons.append({
            "Columns": 1,
            "Rows": 1,
            "Text": text,
            "ActionType": "reply",
            "ActionBody": f"room_{room}"
        })

    # Add Done and Any buttons
    buttons.append({
        "Columns": 3,
        "Rows": 1,
        "Text": "–î–∞–ª—ñ",
        "ActionType": "reply",
        "ActionBody": "rooms_done"
    })

    buttons.append({
        "Columns": 3,
        "Rows": 1,
        "Text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "ActionType": "reply",
        "ActionBody": "rooms_any"
    })

    return {
        "Type": "keyboard",
        "ButtonsGroupColumns": 6,
        "ButtonsGroupRows": 2,
        "Buttons": buttons
    }


async def handle_rooms(user_id, text):
    """Handle rooms selection asynchronously"""
    user_data = await state_manager.get_state(user_id) or {}
    selected_rooms = user_data.get("rooms", [])

    if text == "rooms_done":
        if not selected_rooms:
            await safe_send_message(
                user_id,
                "–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç."
            )
            return

        # Move to price selection
        city = user_data.get("city", "–ö–∏—ó–≤")
        await state_manager.update_state(user_id, {
            "state": STATE_WAITING_PRICE
        })
        await show_price_options(user_id, city)
    elif text == "rooms_any":
        # User selected "Any number of rooms"
        await state_manager.update_state(user_id, {
            "rooms": None,
            "state": STATE_WAITING_PRICE
        })

        # Move to price selection
        city = user_data.get("city", "–ö–∏—ó–≤")
        await show_price_options(user_id, city)
    elif text.startswith("room_"):
        try:
            room_number = int(text.split("_")[1])

            # Toggle room selection
            if room_number in selected_rooms:
                selected_rooms.remove(room_number)
            else:
                selected_rooms.append(room_number)

            # Update state with selected rooms
            await state_manager.update_state(user_id, {
                "rooms": selected_rooms
            })

            # Show updated keyboard
            keyboard = create_rooms_keyboard(selected_rooms)
            await safe_send_message(
                user_id,
                f"–û–±—Ä–∞–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏: {', '.join(map(str, selected_rooms))}",
                keyboard=keyboard
            )
        except (ValueError, IndexError):
            await safe_send_message(
                user_id,
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç."
            )
    else:
        # Try to parse room numbers from text
        try:
            # Parse room numbers, support both comma and space separated values
            parts = text.replace(",", " ").split()
            room_numbers = [int(part) for part in parts if part.isdigit() and 1 <= int(part) <= 5]

            if not room_numbers:
                raise ValueError("No valid room numbers found")

            # Update selected rooms
            await state_manager.update_state(user_id, {
                "rooms": room_numbers
            })

            # Show confirmation and keyboard
            keyboard = create_rooms_keyboard(room_numbers)
            await safe_send_message(
                user_id,
                f"–û–±—Ä–∞–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏: {', '.join(map(str, room_numbers))}",
                keyboard=keyboard
            )
        except ValueError:
            await safe_send_message(
                user_id,
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–±–æ—Ä—É –∫—ñ–º–Ω–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É.",
                keyboard=create_rooms_keyboard(selected_rooms)
            )


async def show_price_options(user_id, city):
    """Show price range options based on city asynchronously"""
    # Get price ranges for the city
    price_ranges = await get_price_ranges(city)

    # Create keyboard with price range options
    keyboard = create_price_keyboard(price_ranges)

    await safe_send_message(
        user_id,
        "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
        keyboard=keyboard
    )


async def get_price_ranges(city):
    """Get price ranges for a city"""
    # Group cities by size for price ranges
    big_cities = {'–ö–∏—ó–≤'}
    medium_cities = {'–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'}

    if city in big_cities:
        # up to 15000, 15000‚Äì20000, 20000‚Äì30000, more than 30000
        return [(0, 15000), (15000, 20000), (20000, 30000), (30000, None)]
    elif city in medium_cities:
        # up to 7000, 7000‚Äì10000, 10000‚Äì15000, more than 15000
        return [(0, 7000), (7000, 10000), (10000, 15000), (15000, None)]
    else:
        # Default to "smaller" city intervals
        # up to 5000, 5000‚Äì7000, 7000‚Äì10000, more than 10000
        return [(0, 5000), (5000, 7000), (7000, 10000), (10000, None)]


def create_price_keyboard(price_ranges):
    """Create keyboard for price range selection"""
    buttons = []

    for i, (low, high) in enumerate(price_ranges):
        if high is None:
            label = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
            callback = f"price_{low}_any"
        else:
            if low == 0:
                label = f"–î–æ {high} –≥—Ä–Ω."
            else:
                label = f"{low}-{high} –≥—Ä–Ω."
            callback = f"price_{low}_{high}"

        buttons.append({
            "Columns": 3,
            "Rows": 1,
            "Text": label,
            "ActionType": "reply",
            "ActionBody": callback
        })

    return {
        "Type": "keyboard",
        "ButtonsGroupColumns": 6,
        "ButtonsGroupRows": 2,
        "Buttons": buttons
    }


async def handle_price(user_id, text):
    """Handle price range selection asynchronously"""
    user_data = await state_manager.get_state(user_id) or {}

    if text.startswith("price_"):
        parts = text.split("_")

        try:
            low = int(parts[1])
            high = None if parts[2] == "any" else int(parts[2])

            # Update state with price range
            await state_manager.update_state(user_id, {
                "price_min": low if low > 0 else None,
                "price_max": high,
                "state": STATE_CONFIRMATION
            })

            # Format price range for display
            if high is None:
                price_text = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
            else:
                if low == 0:
                    price_text = f"–î–æ {high} –≥—Ä–Ω."
                else:
                    price_text = f"{low}-{high} –≥—Ä–Ω."

            # Show confirmation message
            await safe_send_message(
                user_id,
                f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω: {price_text}"
            )

            # Show summary and confirmation
            await show_confirmation(user_id)
        except (ValueError, IndexError):
            await safe_send_message(
                user_id,
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Ü—ñ–Ω.",
                keyboard=create_price_keyboard(await get_price_ranges(user_data.get("city", "–ö–∏—ó–≤")))
            )
    else:
        # Try to parse price range from text
        await safe_send_message(
            user_id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.",
            keyboard=create_price_keyboard(await get_price_ranges(user_data.get("city", "–ö–∏—ó–≤")))
        )


async def show_confirmation(user_id):
    """Show subscription confirmation asynchronously"""
    user_data = await state_manager.get_state(user_id) or {}

    # Build summary text
    property_type = user_data.get("property_type", "")
    city = user_data.get("city", "")
    rooms = ", ".join(map(str, user_data.get("rooms", []))) if user_data.get("rooms") else "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    price_min = user_data.get("price_min")
    price_max = user_data.get("price_max")
    if price_min and price_max:
        price_range = f"{price_min}-{price_max}"
    elif price_min and not price_max:
        price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
    elif not price_min and price_max:
        price_range = f"–î–æ {price_max}"
    else:
        price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    # Property type human-readable
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(property_type, "")

    summary = (
        "*–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:*\n\n"
        f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n"
    )

    # Create confirmation keyboard
    keyboard = create_confirmation_keyboard()

    await safe_send_message(
        user_id,
        summary,
        keyboard=keyboard
    )


def create_confirmation_keyboard():
    """Create keyboard for subscription confirmation"""
    return {
        "Type": "keyboard",
        "Buttons": [
            {
                "Columns": 6,
                "Rows": 1,
                "Text": "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫",
                "ActionType": "reply",
                "ActionBody": "advanced_search"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                "ActionType": "reply",
                "ActionBody": "edit_parameters"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
                "ActionType": "reply",
                "ActionBody": "subscribe"
            }
        ]
    }


async def handle_confirmation(user_id, text):
    """Handle confirmation of search parameters asynchronously"""
    user_data = await state_manager.get_state(user_id) or {}
    text_lower = text.lower()

    if text_lower == "subscribe" or text_lower == "–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è":
        # Get user database ID
        user_db_id = user_data.get("user_db_id")
        if not user_db_id:
            await safe_send_message(
                user_id,
                "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
            )
            return

        # Prepare filters for database
        filters = {
            'property_type': user_data.get('property_type'),
            'city': user_data.get('city'),
            'rooms': user_data.get('rooms'),
            'price_min': user_data.get('price_min'),
            'price_max': user_data.get('price_max'),
        }

        # Save filters to database
        try:
            update_user_filter(user_db_id, filters)
            start_free_subscription_of_user(user_db_id)

            # Send confirmation message
            await safe_send_message(
                user_id,
                "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å!"
            )

            # Send additional message about notifications
            await safe_send_message(
                user_id,
                "–ú–∏ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–π–Ω–æ –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è!",
                keyboard=create_main_menu_keyboard()
            )

            # Trigger ad notification task via Celery
            celery_app.send_task(
                'notifier_service.app.tasks.notify_user_with_ads',
                args=[user_db_id, filters]
            )

            # Reset state to main menu
            await state_manager.update_state(user_id, {
                "state": STATE_START
            })
        except Exception as e:
            logger.error(f"Error updating user filters: {e}")
            await safe_send_message(
                user_id,
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
    elif text_lower == "edit_parameters" or text_lower == "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏":
        # Show parameter editing menu
        await state_manager.update_state(user_id, {
            "state": STATE_EDITING_PARAMETERS
        })

        keyboard = create_edit_parameters_keyboard()
        await safe_send_message(
            user_id,
            "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
            keyboard=keyboard
        )
    elif text_lower == "advanced_search" or text_lower == "—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫":
        await safe_send_message(
            user_id,
            "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ Viber."
        )
    else:
        await safe_send_message(
            user_id,
            "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
            keyboard=create_confirmation_keyboard()
        )


def create_edit_parameters_keyboard():
    """Create keyboard for parameter editing"""
    return {
        "Type": "keyboard",
        "Buttons": [
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ",
                "ActionType": "reply",
                "ActionBody": "edit_property_type"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–ú—ñ—Å—Ç–æ",
                "ActionType": "reply",
                "ActionBody": "edit_city"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç",
                "ActionType": "reply",
                "ActionBody": "edit_rooms"
            },
            {
                "Columns": 3,
                "Rows": 1,
                "Text": "–î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω",
                "ActionType": "reply",
                "ActionBody": "edit_price"
            },
            {
                "Columns": 6,
                "Rows": 1,
                "Text": "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏",
                "ActionType": "reply",
                "ActionBody": "cancel_edit"
            }
        ]
    }


async def handle_edit_parameters(user_id, text):
    """Handle editing parameters asynchronously"""
    user_data = await state_manager.get_state(user_id) or {}

    if text == "edit_property_type":
        # Reset state to property type selection
        await state_manager.update_state(user_id, {
            "state": STATE_WAITING_PROPERTY_TYPE
        })

        await safe_send_message(
            user_id,
            "üè∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:",
            keyboard=create_property_type_keyboard()
        )
    elif text == "edit_city":
        # Reset state to city selection
        await state_manager.update_state(user_id, {
            "state": STATE_WAITING_CITY
        })

        await safe_send_message(
            user_id,
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
            keyboard=create_city_keyboard(AVAILABLE_CITIES)
        )
    elif text == "edit_rooms":
        # Reset state to rooms selection
        await state_manager.update_state(user_id, {
            "state": STATE_WAITING_ROOMS
        })

        await safe_send_message(
            user_id,
            "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
            keyboard=create_rooms_keyboard(user_data.get("rooms", []))
        )
    elif text == "edit_price":
        # Reset state to price selection
        await state_manager.update_state(user_id, {
            "state": STATE_WAITING_PRICE
        })

        city = user_data.get("city", "–ö–∏—ó–≤")
        await show_price_options(user_id, city)
    elif text == "cancel_edit":
        # Return to confirmation
        await state_manager.update_state(user_id, {
            "state": STATE_CONFIRMATION
        })

        await show_confirmation(user_id)
    else:
        await safe_send_message(
            user_id,
            "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.",
            keyboard=create_edit_parameters_keyboard()
        )


async def handle_menu_option(user_id, text):
    """Handle main menu option selection asynchronously"""
    if text == "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏":
        # This would call your subscription handlers
        # For now, just acknowledge
        await safe_send_message(
            user_id,
            "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—ñ–¥–ø–∏—Å–æ–∫ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        )
    elif text == "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ":
        # This would show favorites
        await safe_send_message(
            user_id,
            "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ–±—Ä–∞–Ω–∏—Ö —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        )
    elif text == "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?":
        # Show help information
        await safe_send_message(
            user_id,
            "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
            "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞.\n"
            "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.\n"
            "3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
            "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!",
            keyboard=create_main_menu_keyboard()
        )
    elif text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É":
        # This would show payment options
        await safe_send_message(
            user_id,
            "–§—É–Ω–∫—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        )
    elif text == "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞":
        # This would show support options
        await safe_send_message(
            user_id,
            "–§—É–Ω–∫—Ü—ñ—è —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        )
    elif text == "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" or text == "–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è":
        # Start phone verification
        from .phone_verification import start_phone_verification
        await start_phone_verification(user_id)
    else:
        await safe_send_message(
            user_id,
            "–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            keyboard=create_main_menu_keyboard()
        )