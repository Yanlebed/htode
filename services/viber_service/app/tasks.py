# services/viber_service/app/tasks.py

import logging
import asyncio
from common.celery_app import celery_app
from .bot import viber, state_manager
from .utils.message_utils import safe_send_message, safe_send_picture
from common.db.models import get_full_ad_data, get_full_ad_description
from common.utils.ad_utils import get_ad_images

logger = logging.getLogger(__name__)


@celery_app.task(name='viber_service.app.tasks.send_ad_with_extra_buttons')
def send_ad_with_extra_buttons(user_id, text, s3_image_url, resource_url, ad_id, ad_external_id):
    """
    Send an ad with interactive buttons via Viber.

    Args:
        user_id: Viber user ID
        text: Ad description text
        s3_image_url: URL to the primary image
        resource_url: Original ad URL
        ad_id: Database ID of the ad
        ad_external_id: External ID of the ad
    """

    async def send():
        try:
            logger.info(f"Sending ad with extra buttons to Viber user {user_id}")

            # Create a keyboard for the ad
            keyboard = {
                "Type": "keyboard",
                "Buttons": [
                    {
                        "Columns": 3,
                        "Rows": 1,
                        "Text": "üñº –ë—ñ–ª—å—à–µ —Ñ–æ—Ç–æ",
                        "ActionType": "reply",
                        "ActionBody": f"more_photos:{ad_id}"
                    },
                    {
                        "Columns": 3,
                        "Rows": 1,
                        "Text": "üì≤ –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏",
                        "ActionType": "reply",
                        "ActionBody": f"call_contact:{ad_id}"
                    },
                    {
                        "Columns": 3,
                        "Rows": 1,
                        "Text": "‚ù§Ô∏è –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω—ñ",
                        "ActionType": "reply",
                        "ActionBody": f"add_fav:{ad_id}"
                    },
                    {
                        "Columns": 3,
                        "Rows": 1,
                        "Text": "‚ÑπÔ∏è –ü–æ–≤–Ω–∏–π –æ–ø–∏—Å",
                        "ActionType": "reply",
                        "ActionBody": f"show_more:{resource_url}"
                    }
                ]
            }

            # Send the ad
            if s3_image_url:
                await safe_send_picture(user_id, s3_image_url, caption=text, keyboard=keyboard)
            else:
                await safe_send_message(user_id, text, keyboard=keyboard)

        except Exception as e:
            logger.error(f"Error sending ad to Viber user {user_id}: {e}")

    # Run the async function
    try:
        asyncio.run(send())
    except RuntimeError as e:
        # Handle case where there's already an event loop
        logger.warning(f"RuntimeError in send_ad_with_extra_buttons: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send())
        finally:
            loop.close()


@celery_app.task(name='viber_service.app.tasks.send_subscription_notification')
def send_subscription_notification(user_id, notification_type, data):
    """
    Send subscription-related notifications to Viber users.

    Args:
        user_id: Viber user ID
        notification_type: Type of notification (e.g., "payment_success", "expiration_reminder")
        data: Dictionary with notification data
    """

    async def send():
        try:
            # Prepare message content based on notification type
            if notification_type == "payment_success":
                message_text = (
                    f"‚úÖ –û–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
                    f"üßæ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {data['order_id']}\n"
                    f"üí∞ –°—É–º–∞: {data['amount']} –≥—Ä–Ω.\n"
                    f"üìÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –¥—ñ–π—Å–Ω–∞ –¥–æ: {data['subscription_until']}\n\n"
                    f"–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É! üôè"
                )
            elif notification_type == "expiration_reminder":
                message_text = (
                    f"‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É\n\n"
                    f"–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {data['days_left']} {'–¥–µ–Ω—å' if data['days_left'] == 1 else '–¥–Ω—ñ' if data['days_left'] < 5 else '–¥–Ω—ñ–≤'}.\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {data['subscription_until']}\n\n"
                    f"–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º, –æ–Ω–æ–≤—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É."
                )
            elif notification_type == "expiration_today":
                message_text = (
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ!\n\n"
                    f"–ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {data['subscription_until']}\n\n"
                    f"–©–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—É, –æ–Ω–æ–≤—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–∑."
                )
            else:
                message_text = "–°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

            # Send notification
            await safe_send_message(user_id, message_text)

        except Exception as e:
            logger.error(f"Error sending notification to Viber user {user_id}: {e}")

    # Run the async function
    try:
        asyncio.run(send())
    except RuntimeError as e:
        logger.warning(f"RuntimeError in send_subscription_notification: {e}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send())
        finally:
            loop.close()