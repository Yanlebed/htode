version: '3.8'

# Define common environment variables for reuse
x-common-variables: &common-variables
  REDIS_URL: "${REDIS_URL:-redis://redis:6379/0}"
  DB_HOST: "${DB_HOST:-postgres}"
  DB_PORT: "${DB_PORT:-5432}"
  DB_NAME: "${DB_NAME:-mydb}"
  DB_USER: "${DB_USER:-myuser}"
  DB_PASS: "${DB_PASS:-mypass}"

# Define common AWS environment variables
x-aws-variables: &aws-variables
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION:-eu-west-1}"
  AWS_S3_BUCKET: "${AWS_S3_BUCKET:-htodebucket}"
  AWS_S3_BUCKET_PREFIX: "${AWS_S3_BUCKET_PREFIX:-ads-images/}"
  CLOUDFRONT_DOMAIN: "${CLOUDFRONT_DOMAIN:-https://d3h86hbbdu2c7h.cloudfront.net}"

# Define resource limits for services with Playwright
x-playwright-resource-limits: &playwright-resource-limits
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: 1G
      reservations:
        cpus: '0.5'
        memory: 512M

# Define common service settings
x-service-settings: &service-settings
  networks:
    - app_net
  restart: unless-stopped

# Define resource limits for services
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        cpus: '0.25'
        memory: 256M

# Define resource limits for smaller services
x-small-resource-limits: &small-resource-limits
  deploy:
    resources:
      limits:
        cpus: '0.30'
        memory: 256M
      reservations:
        cpus: '0.10'
        memory: 128M

services:
  redis:
    image: redis:7
    container_name: my_redis
    <<: *service-settings
    <<: *resource-limits
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 5
    command: [ "redis-server", "--appendonly", "yes" ]

  postgres:
    image: postgres:14
    container_name: my_postgres
    <<: *service-settings
    <<: *resource-limits
    environment:
      POSTGRES_DB: "${DB_NAME:-mydb}"
      POSTGRES_USER: "${DB_USER:-myuser}"
      POSTGRES_PASSWORD: "${DB_PASS:-mypass}"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "postgres" ]
      interval: 5s
      timeout: 2s
      retries: 5

  telegram_service:
    env_file:
      - .env
    container_name: telegram_service
    <<: *service-settings
    <<: *resource-limits
    build:
      context: .
      dockerfile: services/telegram_service/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-variables
      TELEGRAM_TOKEN: "${TELEGRAM_TOKEN}"
    command: python -m app.main

  telegram_worker_service:
    env_file:
      - .env
    container_name: telegram_worker
    <<: *service-settings
    <<: *resource-limits
    build:
      context: .
      dockerfile: services/telegram_service/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-variables
      TELEGRAM_TOKEN: "${TELEGRAM_TOKEN}"
    command: celery -A app.celery_app.celery_app worker -Q telegram_queue --loglevel=info --concurrency=2 --max-tasks-per-child=100
    healthcheck:
      test: [ "CMD", "celery", "inspect", "ping", "-d", "celery@telegram_worker" ]
      interval: 30s
      timeout: 10s
      retries: 3

  scraper_worker_service:
    container_name: scraper_worker_service
    <<: *service-settings
    <<: *playwright-resource-limits  # Use the new resource limits
    build:
      context: .
      dockerfile: services/scraper_service/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-variables
      <<: *aws-variables
    command: celery -A scraper_service.app.celery_app worker --loglevel=info -Q scrape_queue --max-tasks-per-child=50
    healthcheck:
      test: [ "CMD", "celery", "inspect", "ping", "-d", "celery@scraper_worker_service" ]
      interval: 30s
      timeout: 10s
      retries: 3

  scraper_beat_service:
    container_name: scraper_beat_service
    <<: *service-settings
    <<: *small-resource-limits
    build:
      context: .
      dockerfile: services/scraper_service/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-variables
      <<: *aws-variables
    command: celery -A scraper_service.app.celery_app beat --loglevel=info

  scraper_init_service:
    container_name: scraper_init_service
    build:
      context: .
      dockerfile: services/scraper_service/Dockerfile
    <<: *small-resource-limits
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      scraper_worker_service:
        condition: service_started
    environment:
      <<: *common-variables
      <<: *aws-variables
    networks:
      - app_net
    command: >
      sh -c "
        echo 'Waiting for postgres to be ready...';
        until pg_isready -h postgres -p 5432 -U $${DB_USER}; do
          sleep 1;
        done;
        echo 'Postgres is ready. Triggering initial data scrape...';
        celery -A scraper_service.app.celery_app call scraper_service.app.tasks.initial_30_day_scrape;
        echo 'Initial data scrape task triggered. Exiting.';
      "
    restart: "no"

  notifier_service:
    container_name: notifier_service
    <<: *service-settings
    <<: *resource-limits
    build:
      context: .
      dockerfile: services/notifier_service/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-variables
      <<: *aws-variables
    command: celery -A app.celery_app.celery_app worker --loglevel=info -Q notify_queue
    healthcheck:
      test: [ "CMD", "celery", "inspect", "ping", "-d", "celery@notifier_service" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mini_webapp_service:
    container_name: mini_webapp
    <<: *service-settings
    <<: *small-resource-limits
    build:
      context: services/webapps
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      <<: *common-variables
    command: python /app/mini_webapp.py
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app_net:
    driver: bridge

volumes:
  postgres-data:
  redis-data: