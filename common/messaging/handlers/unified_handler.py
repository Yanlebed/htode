# common/messaging/handlers/unified_handler.py

import logging
from typing import Dict, Any, List, Union

from common.db.models import (
    get_subscription_data_for_user,
    get_subscription_until_for_user, update_user_filter, add_favorite_ad,
    remove_favorite_ad, list_favorites
)
from common.config import GEO_ID_MAPPING
from common.messaging.unified_platform_utils import safe_send_message, safe_send_menu
from common.messaging.unified_platform_utils import resolve_user_id

logger = logging.getLogger(__name__)


async def handle_main_menu(user_id: Union[str, int], platform: str = None):
    """
    Show the main menu across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
    """
    options = [
        {"text": "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏", "value": "my_subscriptions"},
        {"text": "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ", "value": "favorites"},
        {"text": "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?", "value": "how_it_works"},
        {"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "value": "payment"},
        {"text": "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "value": "support"},
        {"text": "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "value": "phone_verification"}
    ]

    await safe_send_menu(
        user_id=user_id,
        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        options=options,
        platform=platform
    )
    return True


async def handle_how_it_works(user_id: Union[str, int], platform: str = None):
    """
    Show help information across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
    """
    text = (
        "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
        "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞.\n"
        "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.\n"
        "3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
    )

    options = [
        {"text": "‚Ü™Ô∏è –ù–∞–∑–∞–¥", "value": "back_to_menu"}
    ]

    await safe_send_menu(
        user_id=user_id,
        text=text,
        options=options,
        platform=platform
    )
    return True


async def handle_subscription_info(user_id: Union[str, int], platform: str = None):
    """
    Display subscription details across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
    """
    # Get database user ID
    db_user_id, _, _ = resolve_user_id(user_id, platform)

    if not db_user_id:
        await safe_send_message(user_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", platform=platform)
        return False

    # Get subscription data
    sub_data = get_subscription_data_for_user(db_user_id)
    subscription_until = get_subscription_until_for_user(db_user_id, free=True)
    if not subscription_until:
        subscription_until = get_subscription_until_for_user(db_user_id, free=False)

    if not sub_data:
        await safe_send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.", platform=platform)
        return True

    # Format subscription details
    city = GEO_ID_MAPPING.get(sub_data['city'])
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(sub_data['property_type'], "")

    rooms_list = sub_data['rooms_count']
    rooms = []
    for el in rooms_list:
        rooms.append(str(el))
    rooms = '-'.join(rooms)

    text = (
        f"–î–µ—Ç–∞–ª—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:\n"
        f"  - –ú—ñ—Å—Ç–æ: {city}\n"
        f"  - –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"  - –ö-—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"  - –¶—ñ–Ω–∞: {str(sub_data['price_min'])} - {str(sub_data['price_max'])} –≥—Ä–Ω.\n\n"
        f"–ü—ñ–¥–ø–∏—Å–∫–∞ —Å–ø–ª–∏–≤–∞—î {subscription_until}\n"
    )

    options = [
        {"text": "üõë –í—ñ–¥–∫–ª—é—á–∏—Ç–∏", "value": "disable_subscription"},
        {"text": "‚úÖ –í–∫–ª—é—á–∏—Ç–∏", "value": "enable_subscription"},
        {"text": "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "value": "edit_subscription"},
        {"text": "‚Ü™Ô∏è –ù–∞–∑–∞–¥", "value": "back_to_menu"}
    ]

    await safe_send_menu(
        user_id=user_id,
        text=text,
        options=options,
        platform=platform
    )
    return True


async def handle_favorites(user_id: Union[str, int], platform: str = None):
    """
    Handle favorite listings across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
    """
    # Get database user ID
    db_user_id, _, _ = resolve_user_id(user_id, platform)

    if not db_user_id:
        await safe_send_message(user_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", platform=platform)
        return False

    # Get favorites
    favorites = list_favorites(db_user_id)

    if not favorites:
        await safe_send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.", platform=platform)
        return True

    # Let the platform-specific handler show the favorites since the UI is very different
    # Just return the data
    return favorites


async def handle_property_type_selection(user_id: Union[str, int], platform: str = None):
    """
    Show property type selection across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
    """
    options = [
        {"text": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "value": "property_type_apartment"},
        {"text": "–ë—É–¥–∏–Ω–æ–∫", "value": "property_type_house"}
    ]

    await safe_send_menu(
        user_id=user_id,
        text="üè∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:",
        options=options,
        platform=platform
    )
    return True


async def handle_city_selection(user_id: Union[str, int], platform: str = None, cities: List[str] = None):
    """
    Show city selection across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        platform: Optional platform identifier
        cities: Optional list of available cities
    """
    if not cities:
        # Default list of cities
        cities = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                  '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                  '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']

    # Create options for the menu
    options = [{"text": city, "value": f"city_{city.lower()}"} for city in cities]

    await safe_send_menu(
        user_id=user_id,
        text="üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        options=options,
        platform=platform
    )
    return True


async def handle_rooms_selection(user_id: Union[str, int], selected_rooms: List[int] = None, platform: str = None):
    """
    Show room selection across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        selected_rooms: Optional list of already selected rooms
        platform: Optional platform identifier
    """
    if selected_rooms is None:
        selected_rooms = []

    # Create options for room selection
    options = []
    for room in range(1, 6):
        text = f"‚úÖ {room}" if room in selected_rooms else f"{room}"
        options.append({"text": text, "value": f"room_{room}"})

    # Add additional options
    options.append({"text": "–î–∞–ª—ñ", "value": "rooms_done"})
    options.append({"text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "value": "rooms_any"})

    await safe_send_menu(
        user_id=user_id,
        text="üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
        options=options,
        platform=platform
    )
    return True


async def handle_price_selection(user_id: Union[str, int], city: str, platform: str = None):
    """
    Show price selection across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        city: City name for appropriate price ranges
        platform: Optional platform identifier
    """
    # Define price ranges based on city
    big_cities = {'–ö–∏—ó–≤'}
    medium_cities = {'–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'}

    if city in big_cities:
        price_ranges = [(0, 15000), (15000, 20000), (20000, 30000), (30000, None)]
    elif city in medium_cities:
        price_ranges = [(0, 7000), (7000, 10000), (10000, 15000), (15000, None)]
    else:
        price_ranges = [(0, 5000), (5000, 7000), (7000, 10000), (10000, None)]

    # Create options from price ranges
    options = []
    for low, high in price_ranges:
        if high is None:
            label = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
            value = f"price_{low}_any"
        else:
            if low == 0:
                label = f"–î–æ {high} –≥—Ä–Ω."
            else:
                label = f"{low}-{high} –≥—Ä–Ω."
            value = f"price_{low}_{high}"

        options.append({"text": label, "value": value})

    await safe_send_menu(
        user_id=user_id,
        text="üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):",
        options=options,
        platform=platform
    )
    return True


async def handle_subscription_confirmation(user_id: Union[str, int], user_data: Dict[str, Any], platform: str = None):
    """
    Show subscription confirmation across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        user_data: Dictionary with user's filter data
        platform: Optional platform identifier
    """
    # Format the data for display
    property_type = user_data.get('property_type', '')
    mapping_property = {"apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "house": "–ë—É–¥–∏–Ω–æ–∫"}
    ua_lang_property_type = mapping_property.get(property_type, "")

    city = user_data.get('city', '')
    rooms = ', '.join(map(str, user_data.get('rooms', []))) if user_data.get('rooms') else '–ù–µ –≤–∞–∂–ª–∏–≤–æ'

    price_min = user_data.get('price_min')
    price_max = user_data.get('price_max')
    if price_min and price_max:
        price_range = f"{price_min}-{price_max}"
    elif price_min and not price_max:
        price_range = f"–ë—ñ–ª—å—à–µ {price_min}"
    elif not price_min and price_max:
        price_range = f"–î–æ {price_max}"
    else:
        price_range = "–ù–µ –≤–∞–∂–ª–∏–≤–æ"

    summary = (
        f"**–û–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:**\n"
        f"üè∑ –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {ua_lang_property_type}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {price_range} –≥—Ä–Ω.\n"
    )

    # Create options for the confirmation
    options = [
        {"text": "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫", "value": "advanced_search"},
        {"text": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "value": "edit_parameters"},
        {"text": "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", "value": "subscribe"}
    ]

    await safe_send_menu(
        user_id=user_id,
        text=summary,
        options=options,
        platform=platform
    )
    return True


async def process_subscription(user_id: Union[str, int], user_data: Dict[str, Any], platform: str = None):
    """
    Process subscription submission across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        user_data: Dictionary with user's filter data
        platform: Optional platform identifier
    """
    # Get database user ID
    db_user_id, _, _ = resolve_user_id(user_id, platform)

    if not db_user_id:
        await safe_send_message(user_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", platform=platform)
        return False

    # Prepare filters
    filters = {
        'property_type': user_data.get('property_type'),
        'city': user_data.get('city'),
        'rooms': user_data.get('rooms'),
        'price_min': user_data.get('price_min'),
        'price_max': user_data.get('price_max'),
    }

    # Save to database
    try:
        update_user_filter(db_user_id, filters)

        # Send confirmation message
        await safe_send_message(
            user_id=user_id,
            text="–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å!",
            platform=platform
        )

        # Send additional message about notifications
        await safe_send_message(
            user_id=user_id,
            text="–ú–∏ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–π–Ω–æ –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è!",
            platform=platform
        )

        return True
    except Exception as e:
        logger.error(f"Error updating user filters: {e}")
        await safe_send_message(
            user_id=user_id,
            text="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            platform=platform
        )
        return False


async def handle_favorite_action(user_id: Union[str, int], action: str, ad_id: int, platform: str = None):
    """
    Handle adding or removing favorite ads across all messaging platforms.

    Args:
        user_id: User's platform-specific ID or database ID
        action: Action to perform ('add' or 'remove')
        ad_id: ID of the ad
        platform: Optional platform identifier
    """
    # Get database user ID
    db_user_id, _, _ = resolve_user_id(user_id, platform)

    if not db_user_id:
        await safe_send_message(user_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", platform=platform)
        return False

    try:
        if action == 'add':
            add_favorite_ad(db_user_id, ad_id)
            await safe_send_message(user_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö!", platform=platform)
        elif action == 'remove':
            remove_favorite_ad(db_user_id, ad_id)
            await safe_send_message(user_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö!", platform=platform)

        return True
    except Exception as e:
        logger.error(f"Error handling favorite action: {e}")
        await safe_send_message(user_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", platform=platform)
        return False