# common/messaging/keyboard_utils.py

import logging
from typing import List, Dict, Any, Optional, Union

logger = logging.getLogger(__name__)

# City data for reference
AVAILABLE_CITIES = ['–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–î–Ω—ñ–ø—Ä–æ', '–ñ–∏—Ç–æ–º–∏—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö–∏—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–õ—É—Ü—å–∫',
                    '–õ—å–≤—ñ–≤', '–ú–∏–∫–æ–ª–∞—ó–≤', '–û–¥–µ—Å–∞', '–ü–æ–ª—Ç–∞–≤–∞', '–†—ñ–≤–Ω–µ', '–°—É–º–∏', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–£–∂–≥–æ—Ä–æ–¥', '–•–∞—Ä–∫—ñ–≤',
                    '–•–µ—Ä—Å–æ–Ω', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ']

CITY_GROUPS = {
    'big_cities': {'–ö–∏—ó–≤'},
    'medium_cities': {'–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'},
    'small_cities': set(AVAILABLE_CITIES) - {'–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–û–¥–µ—Å–∞', '–õ—å–≤—ñ–≤'}
}


def get_price_ranges(city: str) -> List[tuple]:
    """
    Returns price ranges for the given city.

    Args:
        city: City name

    Returns:
        List of (min_price, max_price) tuples
    """
    if city in CITY_GROUPS['big_cities']:
        # up to 15000, 15000‚Äì20000, 20000‚Äì30000, more than 30000
        return [(0, 15000), (15000, 20000), (20000, 30000), (30000, None)]
    elif city in CITY_GROUPS['medium_cities']:
        # up to 7000, 7000‚Äì10000, 10000‚Äì15000, more than 15000
        return [(0, 7000), (7000, 10000), (10000, 15000), (15000, None)]
    else:
        # Default to "smaller" city intervals
        # up to 5000, 5000‚Äì7000, 7000‚Äì10000, more than 10000
        return [(0, 5000), (5000, 7000), (7000, 10000), (10000, None)]


class KeyboardFactory:
    """
    Factory class for creating platform-specific keyboards with a unified interface.

    Provides methods to generate keyboards for various scenarios:
    - Main menu
    - Property type selection
    - City selection
    - Room selection
    - Price range selection
    - Subscription confirmation
    - Edit parameters
    """

    @staticmethod
    def create_keyboard(platform: str, keyboard_type: str, **kwargs) -> Any:
        """
        Create a platform-specific keyboard.

        Args:
            platform: Platform name ('telegram', 'viber', 'whatsapp')
            keyboard_type: Type of keyboard to create
            **kwargs: Additional parameters for specific keyboard types

        Returns:
            Platform-specific keyboard object
        """
        if platform == "telegram":
            return TelegramKeyboardFactory.create_keyboard(keyboard_type, **kwargs)
        elif platform == "viber":
            return ViberKeyboardFactory.create_keyboard(keyboard_type, **kwargs)
        elif platform == "whatsapp":
            return WhatsAppKeyboardFactory.create_keyboard(keyboard_type, **kwargs)
        else:
            logger.warning(f"Unsupported platform: {platform}")
            return None


class TelegramKeyboardFactory:
    """Factory for Telegram-specific keyboards"""

    @classmethod
    def create_keyboard(cls, keyboard_type: str, **kwargs) -> Any:
        """Create a Telegram keyboard based on type"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

        if keyboard_type == "main_menu":
            return cls.create_main_menu_keyboard()
        elif keyboard_type == "property_type":
            return cls.create_property_type_keyboard()
        elif keyboard_type == "city":
            cities = kwargs.get('cities', AVAILABLE_CITIES)
            return cls.create_city_keyboard(cities)
        elif keyboard_type == "rooms":
            selected_rooms = kwargs.get('selected_rooms', [])
            return cls.create_rooms_keyboard(selected_rooms)
        elif keyboard_type == "price":
            city = kwargs.get('city', '–ö–∏—ó–≤')
            return cls.create_price_keyboard(city)
        elif keyboard_type == "confirmation":
            return cls.create_confirmation_keyboard()
        elif keyboard_type == "edit_parameters":
            return cls.create_edit_parameters_keyboard()
        elif keyboard_type == "floor":
            floor_opts = kwargs.get('floor_opts', None)
            return cls.create_floor_keyboard(floor_opts)
        else:
            logger.warning(f"Unknown keyboard type for Telegram: {keyboard_type}")
            return None

    @staticmethod
    def create_main_menu_keyboard():
        """Create the main menu keyboard for Telegram"""
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row(
            KeyboardButton("üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"),
            KeyboardButton("‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ")
        )
        keyboard.row(
            KeyboardButton("ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?"),
            KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
        )
        keyboard.row(
            KeyboardButton("üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"),
            KeyboardButton("üì± –î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        )
        return keyboard

    @staticmethod
    def create_property_type_keyboard():
        """Create keyboard for property type selection"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="property_type_apartment"),
            InlineKeyboardButton("–ë—É–¥–∏–Ω–æ–∫", callback_data="property_type_house")
        )
        return keyboard

    @staticmethod
    def create_city_keyboard(cities):
        """Create keyboard for city selection"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(row_width=2)
        for city in cities:
            keyboard.add(
                InlineKeyboardButton(city, callback_data=f"city_{city.lower()}")
            )
        return keyboard

    @staticmethod
    def create_rooms_keyboard(selected_rooms=None):
        """Create keyboard for room selection"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        if selected_rooms is None:
            selected_rooms = []

        keyboard = InlineKeyboardMarkup(row_width=3)
        for rooms in range(1, 6):
            if rooms in selected_rooms:
                button_text = f"‚úÖ {rooms}"
            else:
                button_text = str(rooms)
            keyboard.insert(
                InlineKeyboardButton(button_text, callback_data=f"rooms_{rooms}")
            )
        keyboard.add(
            InlineKeyboardButton("–î–∞–ª—ñ", callback_data="rooms_done"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="rooms_any")
        )
        return keyboard

    @staticmethod
    def create_price_keyboard(city):
        """Create keyboard for price range selection"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        intervals = get_price_ranges(city)
        keyboard = InlineKeyboardMarkup(row_width=2)
        for (low, high) in intervals:
            if high is None:
                label = f"–ë—ñ–ª—å—à–µ {low}"
                callback_data = f"price_{low}_any"
            else:
                # E.g. "0-5000 UAH", "5000-7000 UAH"
                if low == 0:
                    label = f"–î–æ {high}"  # "up to X"
                else:
                    label = f"{low}-{high}"
                callback_data = f"price_{low}_{high}"

            keyboard.insert(
                InlineKeyboardButton(label, callback_data=callback_data)
            )

        return keyboard

    @staticmethod
    def create_confirmation_keyboard():
        """Create keyboard for subscription confirmation"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫", callback_data="advanced_search"),
            InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_parameters"),
            InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data="subscribe")
        )
        return keyboard

    @staticmethod
    def create_edit_parameters_keyboard():
        """Create keyboard for parameter editing"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ", callback_data="edit_property_type"),
            InlineKeyboardButton("–ú—ñ—Å—Ç–æ", callback_data="edit_city"),
            InlineKeyboardButton("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç", callback_data="edit_rooms"),
            InlineKeyboardButton("–î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω", callback_data="edit_price"),
            InlineKeyboardButton("–ü–æ–≤–µ—Ä—Ö", callback_data="edit_floor"),
            InlineKeyboardButton("–ó —Ç–≤–∞—Ä–∏–Ω–∞–º–∏?", callback_data="pets_allowed"),
            InlineKeyboardButton("–í—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞?", callback_data="without_broker"),
            InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_edit"),
        )
        return keyboard

    @staticmethod
    def create_floor_keyboard(floor_opts=None):
        """Create keyboard for floor selection"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        if floor_opts is None:
            floor_opts = {
                "not_first": False,
                "not_last": False,
                "floor_max_6": False,
                "floor_max_10": False,
                "floor_max_17": False,
                "only_last": False
            }

        def mark(label, active):
            return f"{'‚úÖ ' if active else ''}{label}"

        kb = InlineKeyboardMarkup(row_width=2)
        kb.insert(InlineKeyboardButton(
            mark("–ù–µ –ø–µ—Ä—à–∏–π", floor_opts["not_first"]),
            callback_data="toggle_floor_not_first"
        ))
        kb.insert(InlineKeyboardButton(
            mark("–ù–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π", floor_opts["not_last"]),
            callback_data="toggle_floor_not_last"
        ))

        kb.add(InlineKeyboardButton(
            mark("–î–æ 6 –ø–æ–≤–µ—Ä—Ö—É", floor_opts.get("floor_max_6", False)),
            callback_data="toggle_floor_6"
        ))
        kb.insert(InlineKeyboardButton(
            mark("–î–æ 10 –ø–æ–≤–µ—Ä—Ö—É", floor_opts.get("floor_max_10", False)),
            callback_data="toggle_floor_10"
        ))
        kb.insert(InlineKeyboardButton(
            mark("–î–æ 17 –ø–æ–≤–µ—Ä—Ö—É", floor_opts.get("floor_max_17", False)),
            callback_data="toggle_floor_17"
        ))

        kb.add(InlineKeyboardButton(
            mark("–û—Å—Ç–∞–Ω–Ω—ñ–π", floor_opts.get("only_last", False)),
            callback_data="toggle_floor_only_last"
        ))

        # add "Back" or "Done" button
        kb.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="floor_done"))

        return kb


class ViberKeyboardFactory:
    """Factory for Viber-specific keyboards"""

    @classmethod
    def create_keyboard(cls, keyboard_type: str, **kwargs) -> Dict[str, Any]:
        """Create a Viber keyboard based on type"""
        if keyboard_type == "main_menu":
            return cls.create_main_menu_keyboard()
        elif keyboard_type == "property_type":
            return cls.create_property_type_keyboard()
        elif keyboard_type == "city":
            cities = kwargs.get('cities', AVAILABLE_CITIES)
            return cls.create_city_keyboard(cities)
        elif keyboard_type == "rooms":
            selected_rooms = kwargs.get('selected_rooms', [])
            return cls.create_rooms_keyboard(selected_rooms)
        elif keyboard_type == "price":
            city = kwargs.get('city', '–ö–∏—ó–≤')
            return cls.create_price_keyboard(city)
        elif keyboard_type == "confirmation":
            return cls.create_confirmation_keyboard()
        elif keyboard_type == "edit_parameters":
            return cls.create_edit_parameters_keyboard()
        else:
            logger.warning(f"Unknown keyboard type for Viber: {keyboard_type}")
            return {"Type": "keyboard", "Buttons": []}

    @staticmethod
    def create_main_menu_keyboard():
        """Create the main menu keyboard for Viber"""
        return {
            "Type": "keyboard",
            "Buttons": [
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏",
                    "ActionType": "reply",
                    "ActionBody": "üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ",
                    "ActionType": "reply",
                    "ActionBody": "‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?",
                    "ActionType": "reply",
                    "ActionBody": "ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
                    "ActionType": "reply",
                    "ActionBody": "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"
                },
                {
                    "Columns": 6,
                    "Rows": 1,
                    "Text": "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
                    "ActionType": "reply",
                    "ActionBody": "üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
                }
            ]
        }

    @staticmethod
    def create_property_type_keyboard():
        """Create keyboard for property type selection"""
        return {
            "Type": "keyboard",
            "Buttons": [
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
                    "ActionType": "reply",
                    "ActionBody": "apartment"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–ë—É–¥–∏–Ω–æ–∫",
                    "ActionType": "reply",
                    "ActionBody": "house"
                }
            ]
        }

    @staticmethod
    def create_city_keyboard(cities):
        """Create keyboard for city selection"""
        buttons = []

        # Create buttons for cities
        for city in cities:
            buttons.append({
                "Columns": 3,
                "Rows": 1,
                "Text": city,
                "ActionType": "reply",
                "ActionBody": f"city_{city.lower()}"
            })

        return {
            "Type": "keyboard",
            "ButtonsGroupColumns": 6,
            "ButtonsGroupRows": 7,
            "Buttons": buttons
        }

    @staticmethod
    def create_rooms_keyboard(selected_rooms=None):
        """Create keyboard for room selection"""
        if selected_rooms is None:
            selected_rooms = []

        buttons = []

        # Add number buttons 1-5
        for room in range(1, 6):
            text = f"‚úÖ {room}" if room in selected_rooms else f"{room}"
            buttons.append({
                "Columns": 1,
                "Rows": 1,
                "Text": text,
                "ActionType": "reply",
                "ActionBody": f"room_{room}"
            })

        # Add Done and Any buttons
        buttons.append({
            "Columns": 3,
            "Rows": 1,
            "Text": "–î–∞–ª—ñ",
            "ActionType": "reply",
            "ActionBody": "rooms_done"
        })

        buttons.append({
            "Columns": 3,
            "Rows": 1,
            "Text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
            "ActionType": "reply",
            "ActionBody": "rooms_any"
        })

        return {
            "Type": "keyboard",
            "ButtonsGroupColumns": 6,
            "ButtonsGroupRows": 2,
            "Buttons": buttons
        }

    @staticmethod
    def create_price_keyboard(city):
        """Create keyboard for price range selection"""
        intervals = get_price_ranges(city)
        buttons = []

        for i, (low, high) in enumerate(intervals):
            if high is None:
                label = f"–ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω."
                callback = f"price_{low}_any"
            else:
                if low == 0:
                    label = f"–î–æ {high} –≥—Ä–Ω."
                else:
                    label = f"{low}-{high} –≥—Ä–Ω."
                callback = f"price_{low}_{high}"

            buttons.append({
                "Columns": 3,
                "Rows": 1,
                "Text": label,
                "ActionType": "reply",
                "ActionBody": callback
            })

        return {
            "Type": "keyboard",
            "ButtonsGroupColumns": 6,
            "ButtonsGroupRows": 2,
            "Buttons": buttons
        }

    @staticmethod
    def create_confirmation_keyboard():
        """Create keyboard for subscription confirmation"""
        return {
            "Type": "keyboard",
            "Buttons": [
                {
                    "Columns": 6,
                    "Rows": 1,
                    "Text": "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫",
                    "ActionType": "reply",
                    "ActionBody": "advanced_search"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                    "ActionType": "reply",
                    "ActionBody": "edit_parameters"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
                    "ActionType": "reply",
                    "ActionBody": "subscribe"
                }
            ]
        }

    @staticmethod
    def create_edit_parameters_keyboard():
        """Create keyboard for parameter editing"""
        return {
            "Type": "keyboard",
            "Buttons": [
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ",
                    "ActionType": "reply",
                    "ActionBody": "edit_property_type"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–ú—ñ—Å—Ç–æ",
                    "ActionType": "reply",
                    "ActionBody": "edit_city"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç",
                    "ActionType": "reply",
                    "ActionBody": "edit_rooms"
                },
                {
                    "Columns": 3,
                    "Rows": 1,
                    "Text": "–î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω",
                    "ActionType": "reply",
                    "ActionBody": "edit_price"
                },
                {
                    "Columns": 6,
                    "Rows": 1,
                    "Text": "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏",
                    "ActionType": "reply",
                    "ActionBody": "cancel_edit"
                }
            ]
        }


class WhatsAppKeyboardFactory:
    """
    Factory for WhatsApp keyboards.

    Since WhatsApp doesn't support rich keyboards via the Twilio API,
    this class creates text-based menu strings.
    """

    @classmethod
    def create_keyboard(cls, keyboard_type: str, **kwargs) -> str:
        """Create a WhatsApp text-based menu based on type"""
        if keyboard_type == "main_menu":
            return cls.create_main_menu_keyboard()
        elif keyboard_type == "property_type":
            return cls.create_property_type_keyboard()
        elif keyboard_type == "city":
            cities = kwargs.get('cities', AVAILABLE_CITIES)
            limit = kwargs.get('limit', 10)
            return cls.create_city_keyboard(cities, limit)
        elif keyboard_type == "rooms":
            selected_rooms = kwargs.get('selected_rooms', [])
            return cls.create_rooms_keyboard(selected_rooms)
        elif keyboard_type == "price":
            city = kwargs.get('city', '–ö–∏—ó–≤')
            return cls.create_price_keyboard(city)
        elif keyboard_type == "confirmation":
            return cls.create_confirmation_keyboard()
        elif keyboard_type == "edit_parameters":
            return cls.create_edit_parameters_keyboard()
        else:
            logger.warning(f"Unknown keyboard type for WhatsApp: {keyboard_type}")
            return "–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ."

    @staticmethod
    def create_main_menu_keyboard():
        """Create the main menu text for WhatsApp"""
        return (
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n"
            "1. üìù –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
            "2. ‚ù§Ô∏è –û–±—Ä–∞–Ω—ñ\n"
            "3. ü§î –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n"
            "4. üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
            "5. üßë‚Äçüíª –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
            "6. üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó"
        )

    @staticmethod
    def create_property_type_keyboard():
        """Create property type menu text for WhatsApp"""
        return (
            "–û–±–µ—Ä–∏ —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É):\n"
            "1. –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "2. –ë—É–¥–∏–Ω–æ–∫"
        )

    @staticmethod
    def create_city_keyboard(cities, limit=10):
        """Create city selection menu text for WhatsApp"""
        city_list = cities[:limit]  # Limit to avoid too long messages
        city_options = "\n".join([f"{i + 1}. {city}" for i, city in enumerate(city_list)])

        return (
            "üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É):\n\n"
            f"{city_options}\n\n"
            "–Ø–∫—â–æ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∞–∑–≤—É"
        )

    @staticmethod
    def create_rooms_keyboard(selected_rooms=None):
        """Create room selection menu text for WhatsApp"""
        return (
            "üõèÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:\n\n"
            "1. 1 –∫—ñ–º–Ω–∞—Ç–∞\n"
            "2. 2 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "3. 3 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "4. 4 –∫—ñ–º–Ω–∞—Ç–∏\n"
            "5. 5 –∫—ñ–º–Ω–∞—Ç\n"
            "6. –ë—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3"
        )

    @staticmethod
    def create_price_keyboard(city):
        """Create price range selection menu text for WhatsApp"""
        intervals = get_price_ranges(city)
        options = []

        for i, (low, high) in enumerate(intervals):
            if high is None:
                options.append(f"{i + 1}. –ë—ñ–ª—å—à–µ {low} –≥—Ä–Ω.")
            else:
                if low == 0:
                    options.append(f"{i + 1}. –î–æ {high} –≥—Ä–Ω.")
                else:
                    options.append(f"{i + 1}. {low}-{high} –≥—Ä–Ω.")

        return (
                "üí∞ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω (–≥—Ä–Ω):\n\n"
                + "\n".join(options)
        )

    @staticmethod
    def create_confirmation_keyboard():
        """Create subscription confirmation text for WhatsApp"""
        return (
            "–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            "1. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è - —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä\n"
            "2. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ - —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
            "3. –†–æ–∑—à–∏—Ä–µ–Ω–∏–π - –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"
        )

    @staticmethod
    def create_edit_parameters_keyboard():
        """Create parameter editing menu text for WhatsApp"""
        return (
            "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É):\n\n"
            "1. –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
            "2. –ú—ñ—Å—Ç–æ\n"
            "3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç\n"
            "4. –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω\n"
            "5. –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
        )